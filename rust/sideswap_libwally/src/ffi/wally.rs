/* automatically generated by rust-bindgen 0.55.1 */

pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const WALLY_OK: u32 = 0;
pub const WALLY_ERROR: i32 = -1;
pub const WALLY_EINVAL: i32 = -2;
pub const WALLY_ENOMEM: i32 = -3;
pub const WALLY_SECP_RANDOMIZE_LEN: u32 = 32;
pub const BASE58_FLAG_CHECKSUM: u32 = 1;
pub const BASE58_CHECKSUM_LEN: u32 = 4;
pub const BIP39_ENTROPY_LEN_128: u32 = 16;
pub const BIP39_ENTROPY_LEN_160: u32 = 20;
pub const BIP39_ENTROPY_LEN_192: u32 = 24;
pub const BIP39_ENTROPY_LEN_224: u32 = 28;
pub const BIP39_ENTROPY_LEN_256: u32 = 32;
pub const BIP39_ENTROPY_LEN_288: u32 = 36;
pub const BIP39_ENTROPY_LEN_320: u32 = 40;
pub const BIP39_SEED_LEN_512: u32 = 64;
pub const BIP39_WORDLIST_LEN: u32 = 2048;
pub const AES_BLOCK_LEN: u32 = 16;
pub const AES_KEY_LEN_128: u32 = 16;
pub const AES_KEY_LEN_192: u32 = 24;
pub const AES_KEY_LEN_256: u32 = 32;
pub const AES_FLAG_ENCRYPT: u32 = 1;
pub const AES_FLAG_DECRYPT: u32 = 2;
pub const SHA256_LEN: u32 = 32;
pub const SHA512_LEN: u32 = 64;
pub const HASH160_LEN: u32 = 20;
pub const HMAC_SHA256_LEN: u32 = 32;
pub const HMAC_SHA512_LEN: u32 = 64;
pub const PBKDF2_HMAC_SHA256_LEN: u32 = 32;
pub const PBKDF2_HMAC_SHA512_LEN: u32 = 64;
pub const EC_PRIVATE_KEY_LEN: u32 = 32;
pub const EC_PUBLIC_KEY_LEN: u32 = 33;
pub const EC_PUBLIC_KEY_UNCOMPRESSED_LEN: u32 = 65;
pub const EC_MESSAGE_HASH_LEN: u32 = 32;
pub const EC_SIGNATURE_LEN: u32 = 64;
pub const EC_SIGNATURE_RECOVERABLE_LEN: u32 = 65;
pub const EC_SIGNATURE_DER_MAX_LEN: u32 = 72;
pub const EC_SIGNATURE_DER_MAX_LOW_R_LEN: u32 = 71;
pub const EC_FLAG_ECDSA: u32 = 1;
pub const EC_FLAG_SCHNORR: u32 = 2;
pub const EC_FLAG_GRIND_R: u32 = 4;
pub const EC_FLAG_RECOVERABLE: u32 = 8;
pub const EC_FLAGS_ALL: u32 = 15;
pub const BITCOIN_MESSAGE_MAX_LEN: u32 = 65472;
pub const BITCOIN_MESSAGE_FLAG_HASH: u32 = 1;
pub const WALLY_TX_SEQUENCE_FINAL: u32 = 4294967295;
pub const WALLY_TX_VERSION_1: u32 = 1;
pub const WALLY_TX_VERSION_2: u32 = 2;
pub const WALLY_TX_IS_ELEMENTS: u32 = 1;
pub const WALLY_TX_IS_ISSUANCE: u32 = 2;
pub const WALLY_TX_IS_PEGIN: u32 = 4;
pub const WALLY_TX_IS_COINBASE: u32 = 8;
pub const WALLY_SATOSHI_PER_BTC: u32 = 100000000;
pub const WALLY_BTC_MAX: u32 = 21000000;
pub const WALLY_TXHASH_LEN: u32 = 32;
pub const WALLY_TX_FLAG_USE_WITNESS: u32 = 1;
pub const WALLY_TX_FLAG_USE_ELEMENTS: u32 = 2;
pub const WALLY_TX_FLAG_ALLOW_PARTIAL: u32 = 4;
pub const WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE: u32 = 1;
pub const WALLY_TX_DUMMY_NULL: u32 = 1;
pub const WALLY_TX_DUMMY_SIG: u32 = 2;
pub const WALLY_TX_DUMMY_SIG_LOW_R: u32 = 4;
pub const WALLY_SIGHASH_ALL: u32 = 1;
pub const WALLY_SIGHASH_NONE: u32 = 2;
pub const WALLY_SIGHASH_SINGLE: u32 = 3;
pub const WALLY_SIGHASH_FORKID: u32 = 64;
pub const WALLY_SIGHASH_ANYONECANPAY: u32 = 128;
pub const WALLY_TX_ASSET_CT_VALUE_PREFIX_A: u32 = 8;
pub const WALLY_TX_ASSET_CT_VALUE_PREFIX_B: u32 = 9;
pub const WALLY_TX_ASSET_CT_ASSET_PREFIX_A: u32 = 10;
pub const WALLY_TX_ASSET_CT_ASSET_PREFIX_B: u32 = 11;
pub const WALLY_TX_ASSET_CT_NONCE_PREFIX_A: u32 = 2;
pub const WALLY_TX_ASSET_CT_NONCE_PREFIX_B: u32 = 3;
pub const WALLY_TX_ASSET_TAG_LEN: u32 = 32;
pub const WALLY_TX_ASSET_CT_VALUE_LEN: u32 = 33;
pub const WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN: u32 = 9;
pub const WALLY_TX_ASSET_CT_ASSET_LEN: u32 = 33;
pub const WALLY_TX_ASSET_CT_NONCE_LEN: u32 = 33;
pub const WALLY_TX_ASSET_CT_LEN: u32 = 33;
pub const WALLY_TX_ISSUANCE_FLAG: u32 = 2147483648;
pub const WALLY_TX_PEGIN_FLAG: u32 = 1073741824;
pub const WALLY_TX_INDEX_MASK: u32 = 1073741823;
pub const BIP32_ENTROPY_LEN_128: u32 = 16;
pub const BIP32_ENTROPY_LEN_256: u32 = 32;
pub const BIP32_ENTROPY_LEN_512: u32 = 64;
pub const BIP32_KEY_FINGERPRINT_LEN: u32 = 4;
pub const BIP32_SERIALIZED_LEN: u32 = 78;
pub const BIP32_INITIAL_HARDENED_CHILD: u32 = 2147483648;
pub const BIP32_FLAG_KEY_PRIVATE: u32 = 0;
pub const BIP32_FLAG_KEY_PUBLIC: u32 = 1;
pub const BIP32_FLAG_SKIP_HASH: u32 = 2;
pub const BIP32_FLAG_KEY_TWEAK_SUM: u32 = 4;
pub const BIP32_VER_MAIN_PUBLIC: u32 = 76067358;
pub const BIP32_VER_MAIN_PRIVATE: u32 = 76066276;
pub const BIP32_VER_TEST_PUBLIC: u32 = 70617039;
pub const BIP32_VER_TEST_PRIVATE: u32 = 70615956;
pub const WALLY_PSBT_HIGHEST_VERSION: u32 = 0;
pub const WALLY_PSBT_FLAG_NON_FINAL: u32 = 1;
pub const PSBT_PROPRIETARY_TYPE: u32 = 252;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    #[doc = " Initialize wally."]
    #[doc = ""]
    #[doc = " As wally is not currently threadsafe, this function should be called once"]
    #[doc = " before threads are created by the application."]
    #[doc = ""]
    #[doc = " :param flags: Flags controlling what to initialize. Currently must be zero."]
    pub fn wally_init(flags: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free any internally allocated memory."]
    #[doc = ""]
    #[doc = " :param flags: Flags controlling what to clean up. Currently must be zero."]
    pub fn wally_cleanup(flags: u32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct secp256k1_context_struct {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Fetch the wally internal secp256k1 context object."]
    #[doc = ""]
    #[doc = " The context is created on demand."]
    pub fn wally_get_secp_context() -> *mut secp256k1_context_struct;
}
extern "C" {
    #[doc = " Securely wipe memory."]
    #[doc = ""]
    #[doc = " :param bytes: Memory to wipe"]
    #[doc = " :param bytes_len: Size of ``bytes`` in bytes."]
    pub fn wally_bzero(
        bytes: *mut ::std::os::raw::c_void,
        bytes_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Securely wipe and then free a string allocated by the library."]
    #[doc = ""]
    #[doc = " :param str: String to free (must be NUL terminated UTF-8)."]
    pub fn wally_free_string(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Provide entropy to randomize the libraries internal libsecp256k1 context."]
    #[doc = ""]
    #[doc = " Random data is used in libsecp256k1 to blind the data being processed,"]
    #[doc = " making side channel attacks more difficult. Wally uses a single"]
    #[doc = " internal context for secp functions that is not initially randomized."]
    #[doc = " The caller should call this function before using any functions that rely on"]
    #[doc = " libsecp256k1 (i.e. Anything using public/private keys)."]
    #[doc = ""]
    #[doc = " As wally is not currently threadsafe, this function should either be"]
    #[doc = " called before threads are created or access to wally functions wrapped"]
    #[doc = " in an application level mutex."]
    #[doc = ""]
    #[doc = " :param bytes: Entropy to use."]
    #[doc = " :param bytes_len: Size of ``bytes`` in bytes. Must be ``WALLY_SECP_RANDOMIZE_LEN``."]
    pub fn wally_secp_randomize(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert bytes to a (lower-case) hexadecimal string."]
    #[doc = ""]
    #[doc = " :param bytes: Bytes to convert."]
    #[doc = " :param bytes_len: Size of ``bytes`` in bytes."]
    #[doc = " :param output: Destination for the resulting hexadecimal string."]
    #[doc = "|    The string returned should be freed using `wally_free_string`."]
    pub fn wally_hex_from_bytes(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a hexadecimal string to bytes."]
    #[doc = ""]
    #[doc = " :param hex: String to convert."]
    #[doc = " :param bytes_out: Where to store the resulting bytes."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes."]
    #[doc = " :param written: Destination for the number of bytes written to ``bytes_out``."]
    pub fn wally_hex_to_bytes(
        hex: *const ::std::os::raw::c_char,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a base 58 encoded string representing binary data."]
    #[doc = ""]
    #[doc = " :param bytes: Binary data to convert."]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param flags: Pass ``BASE58_FLAG_CHECKSUM`` if ``bytes`` should have a"]
    #[doc = "|    checksum calculated and appended before converting to base 58."]
    #[doc = " :param output: Destination for the base 58 encoded string representing ``bytes``."]
    #[doc = "|    The string returned should be freed using `wally_free_string`."]
    pub fn wally_base58_from_bytes(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        flags: u32,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Decode a base 58 encoded string back into into binary data."]
    #[doc = ""]
    #[doc = " :param str_in: Base 58 encoded string to decode."]
    #[doc = " :param flags: Pass ``BASE58_FLAG_CHECKSUM`` if ``bytes_out`` should have a"]
    #[doc = "|    checksum validated and removed before returning. In this case, ``len``"]
    #[doc = "|    must contain an extra ``BASE58_CHECKSUM_LEN`` bytes to calculate the"]
    #[doc = "|    checksum into. The returned length will not include the checksum."]
    #[doc = " :param bytes_out: Destination for converted binary data."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes."]
    #[doc = " :param written: Destination for the length of the decoded bytes."]
    pub fn wally_base58_to_bytes(
        str_in: *const ::std::os::raw::c_char,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return the length of a base58 encoded string once decoded into bytes."]
    #[doc = ""]
    #[doc = " Returns the exact number of bytes that would be required to store ``str_in``"]
    #[doc = " as decoded binary, including any embedded checksum. If the string contains"]
    #[doc = " invalid characters then WALLY_EINVAL is returned. Note that no checksum"]
    #[doc = " validation takes place."]
    #[doc = ""]
    #[doc = " In the worst case (an all zero buffer, represented by a string of '1'"]
    #[doc = " characters), this function will return strlen(``str_in``). You can therefore"]
    #[doc = " safely use the length of ``str_in`` as a buffer size to avoid calling this"]
    #[doc = " function in most cases."]
    #[doc = ""]
    #[doc = " :param str_in: Base 58 encoded string to find the length of."]
    #[doc = " :param written: Destination for the length of the decoded bytes."]
    #[doc = ""]
    pub fn wally_base58_get_length(
        str_in: *const ::std::os::raw::c_char,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " The type of an overridable function to allocate memory"]
pub type wally_malloc_t =
    ::std::option::Option<unsafe extern "C" fn(size: size_t) -> *mut ::std::os::raw::c_void>;
#[doc = " The type of an overridable function to free memory"]
pub type wally_free_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
#[doc = " The type of an overridable function to clear memory"]
pub type wally_bzero_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, len: size_t)>;
#[doc = " The type of an overridable function to generate an EC nonce"]
pub type wally_ec_nonce_t = ::std::option::Option<
    unsafe extern "C" fn(
        nonce32: *mut ::std::os::raw::c_uchar,
        msg32: *const ::std::os::raw::c_uchar,
        key32: *const ::std::os::raw::c_uchar,
        algo16: *const ::std::os::raw::c_uchar,
        data: *mut ::std::os::raw::c_void,
        attempt: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " Structure holding function pointers for overridable wally operations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_operations {
    pub malloc_fn: wally_malloc_t,
    pub free_fn: wally_free_t,
    pub bzero_fn: wally_bzero_t,
    pub ec_nonce_fn: wally_ec_nonce_t,
}
#[test]
fn bindgen_test_layout_wally_operations() {
    assert_eq!(
        ::std::mem::size_of::<wally_operations>(),
        32usize,
        concat!("Size of: ", stringify!(wally_operations))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_operations>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_operations))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_operations>())).malloc_fn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_operations),
            "::",
            stringify!(malloc_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_operations>())).free_fn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_operations),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_operations>())).bzero_fn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_operations),
            "::",
            stringify!(bzero_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_operations>())).ec_nonce_fn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_operations),
            "::",
            stringify!(ec_nonce_fn)
        )
    );
}
extern "C" {
    #[doc = " Fetch the current overridable operations used by wally."]
    #[doc = ""]
    #[doc = " :param output: Destination for the overridable operations."]
    pub fn wally_get_operations(output: *mut wally_operations) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the current overridable operations used by wally."]
    #[doc = ""]
    #[doc = " :param ops: The overridable operations to set."]
    pub fn wally_set_operations(ops: *const wally_operations) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine if the library was built with elements support."]
    #[doc = ""]
    #[doc = " :param written: 1 if the library supports elements, otherwise 0."]
    pub fn wally_is_elements_build(written: *mut size_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct words {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Get the list of default supported languages."]
    #[doc = ""]
    #[doc = " ..note:: The string returned should be freed using `wally_free_string`."]
    pub fn bip39_get_languages(output: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the default word list for a language."]
    #[doc = ""]
    #[doc = " :param lang: Language to use. Pass NULL to use the default English list."]
    #[doc = " :param output: Destination for the resulting word list."]
    #[doc = ""]
    #[doc = " .. note:: The returned structure should not be freed or modified."]
    pub fn bip39_get_wordlist(
        lang: *const ::std::os::raw::c_char,
        output: *mut *mut words,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the 'index'th word from a word list."]
    #[doc = ""]
    #[doc = " :param w: Word list to use. Pass NULL to use the default English list."]
    #[doc = " :param index: The 0-based index of the word in ``w``."]
    #[doc = " :param output: Destination for the resulting word."]
    #[doc = ""]
    #[doc = " The string returned should be freed using `wally_free_string`."]
    pub fn bip39_get_word(
        w: *const words,
        index: size_t,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Generate a mnemonic sentence from the entropy in ``bytes``."]
    #[doc = ""]
    #[doc = " :param w: Word list to use. Pass NULL to use the default English list."]
    #[doc = " :param bytes: Entropy to convert."]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param output: Destination for the resulting mnemonic sentence."]
    #[doc = ""]
    #[doc = " .. note:: The string returned should be freed using `wally_free_string`."]
    pub fn bip39_mnemonic_from_bytes(
        w: *const words,
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a mnemonic sentence into entropy at ``bytes_out``."]
    #[doc = ""]
    #[doc = " :param w: Word list to use. Pass NULL to use the default English list."]
    #[doc = " :param mnemonic: Mnemonic to convert."]
    #[doc = " :param bytes_out: Where to store the resulting entropy."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes."]
    #[doc = " :param written: Destination for the number of bytes written to ``bytes_out``."]
    pub fn bip39_mnemonic_to_bytes(
        w: *const words,
        mnemonic: *const ::std::os::raw::c_char,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Validate the checksum embedded in a mnemonic sentence."]
    #[doc = ""]
    #[doc = " :param w: Word list to use. Pass NULL to use the default English list."]
    #[doc = " :param mnemonic: Mnemonic to validate."]
    pub fn bip39_mnemonic_validate(
        w: *const words,
        mnemonic: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a mnemonic into a binary seed."]
    #[doc = ""]
    #[doc = " :param mnemonic: Mnemonic to convert."]
    #[doc = " :param passphrase: Mnemonic passphrase or NULL if no passphrase is needed."]
    #[doc = " :param bytes_out: The destination for the binary seed."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Currently This must"]
    #[doc = "|      be ``BIP39_SEED_LEN_512``."]
    #[doc = " :param written: Destination for the number of bytes written to ``bytes_out``."]
    pub fn bip39_mnemonic_to_seed(
        mnemonic: *const ::std::os::raw::c_char,
        passphrase: *const ::std::os::raw::c_char,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Derive a pseudorandom key from inputs using an expensive application"]
    #[doc = " of HMAC SHA-256."]
    #[doc = ""]
    #[doc = " :param pass: Password to derive from."]
    #[doc = " :param pass_len: Length of ``pass`` in bytes."]
    #[doc = " :param salt: Salt to derive from."]
    #[doc = " :param salt_len: Length of ``salt`` in bytes."]
    #[doc = " :param cost: The cost of the function. The larger this number, the"]
    #[doc = "|     longer the key will take to derive."]
    #[doc = " :param block_size: The size of memory blocks required."]
    #[doc = " :param parallelism: Parallelism factor."]
    #[doc = " :param bytes_out: Destination for the derived pseudorandom key."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes."]
    pub fn wally_scrypt(
        pass: *const ::std::os::raw::c_uchar,
        pass_len: size_t,
        salt: *const ::std::os::raw::c_uchar,
        salt_len: size_t,
        cost: u32,
        block_size: u32,
        parallelism: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Encrypt/decrypt data using AES (ECB mode, no padding)."]
    #[doc = ""]
    #[doc = " :param key: Key material for initialisation."]
    #[doc = " :param key_len: Length of ``key`` in bytes. Must be an AES_KEY_LEN_ constant."]
    #[doc = " :param bytes: Bytes to encrypt/decrypt."]
    #[doc = " :param bytes_len: Length of ``bytes`` in bytes. Must be a multiple of ``AES_BLOCK_LEN``."]
    #[doc = " :param flags: AES_FLAG_ constants indicating the desired behavior."]
    #[doc = " :param bytes_out: Destination for the encrypted/decrypted data."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be a multiple of ``AES_BLOCK_LEN``."]
    pub fn wally_aes(
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Encrypt/decrypt data using AES (CBC mode, PKCS#7 padding)."]
    #[doc = ""]
    #[doc = " :param key: Key material for initialisation."]
    #[doc = " :param key_len: Length of ``key`` in bytes. Must be an AES_KEY_LEN_ constant."]
    #[doc = " :param iv: Initialisation vector."]
    #[doc = " :param iv_len: Length of ``iv`` in bytes. Must be ``AES_BLOCK_LEN``."]
    #[doc = " :param bytes: Bytes to encrypt/decrypt."]
    #[doc = " :param bytes_len: Length of ``bytes`` in bytes. Must be a multiple of ``AES_BLOCK_LEN``."]
    #[doc = " :param flags: AES_FLAG_ constants indicating the desired behavior."]
    #[doc = " :param bytes_out: Destination for the encrypted/decrypted data."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be a multiple of ``AES_BLOCK_LEN``."]
    #[doc = " :param written: Destination for the number of bytes written to ``bytes_out``."]
    pub fn wally_aes_cbc(
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " SHA-256(m)"]
    #[doc = ""]
    #[doc = " :param bytes: The message to hash"]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting hash."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_sha256(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " SHA-256(m) midstate"]
    #[doc = ""]
    #[doc = " :param bytes: The message to hash"]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting hash."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_sha256_midstate(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " SHA-256(SHA-256(m)) (double SHA-256)"]
    #[doc = ""]
    #[doc = " :param bytes: The message to hash"]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting hash."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_sha256d(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " SHA-512(m)"]
    #[doc = ""]
    #[doc = " :param bytes: The message to hash"]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting hash."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``SHA512_LEN``."]
    pub fn wally_sha512(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " RIPEMD-160(SHA-256(m))"]
    #[doc = ""]
    #[doc = " :param bytes: The message to hash"]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting hash."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``HASH160_LEN``."]
    pub fn wally_hash160(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute an HMAC using SHA-256"]
    #[doc = ""]
    #[doc = " :param key: The key for the hash"]
    #[doc = " :param key_len: The length of ``key`` in bytes."]
    #[doc = " :param bytes: The message to hash"]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting HMAC."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``HMAC_SHA256_LEN``."]
    pub fn wally_hmac_sha256(
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute an HMAC using SHA-512"]
    #[doc = ""]
    #[doc = " :param key: The key for the hash"]
    #[doc = " :param key_len: The length of ``key`` in bytes."]
    #[doc = " :param bytes: The message to hash"]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting HMAC."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``HMAC_SHA512_LEN``."]
    pub fn wally_hmac_sha512(
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Derive a pseudorandom key from inputs using HMAC SHA-256."]
    #[doc = ""]
    #[doc = " :param pass: Password to derive from."]
    #[doc = " :param pass_len: Length of ``pass`` in bytes."]
    #[doc = " :param salt: Salt to derive from."]
    #[doc = " :param salt_len: Length of ``salt`` in bytes."]
    #[doc = " :param flags: Reserved, must be 0."]
    #[doc = " :param cost: The cost of the function. The larger this number, the"]
    #[doc = "|     longer the key will take to derive."]
    #[doc = " :param bytes_out: Destination for the derived pseudorandom key."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. This must be a multiple"]
    #[doc = "|     of ``PBKDF2_HMAC_SHA256_LEN``."]
    pub fn wally_pbkdf2_hmac_sha256(
        pass: *const ::std::os::raw::c_uchar,
        pass_len: size_t,
        salt: *const ::std::os::raw::c_uchar,
        salt_len: size_t,
        flags: u32,
        cost: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Derive a pseudorandom key from inputs using HMAC SHA-512."]
    #[doc = ""]
    #[doc = " :param pass: Password to derive from."]
    #[doc = " :param pass_len: Length of ``pass`` in bytes."]
    #[doc = " :param salt: Salt to derive from."]
    #[doc = " :param salt_len: Length of ``salt`` in bytes."]
    #[doc = " :param flags: Reserved, must be 0."]
    #[doc = " :param cost: The cost of the function. The larger this number, the"]
    #[doc = "|     longer the key will take to derive."]
    #[doc = " :param bytes_out: Destination for the derived pseudorandom key."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. This must be a multiple"]
    #[doc = "|    of ``PBKDF2_HMAC_SHA512_LEN``."]
    pub fn wally_pbkdf2_hmac_sha512(
        pass: *const ::std::os::raw::c_uchar,
        pass_len: size_t,
        salt: *const ::std::os::raw::c_uchar,
        salt_len: size_t,
        flags: u32,
        cost: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Verify that a private key is valid."]
    #[doc = ""]
    #[doc = " :param priv_key: The private key to validate."]
    #[doc = " :param priv_key_len: The length of ``priv_key`` in bytes. Must be ``EC_PRIVATE_KEY_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn wally_ec_private_key_verify(
        priv_key: *const ::std::os::raw::c_uchar,
        priv_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Verify that a public key is valid."]
    #[doc = ""]
    #[doc = " :param pub_key: The public key to validate."]
    #[doc = " :param pub_key_len: The length of ``pub_key`` in bytes. Must be"]
    #[doc = "|    ``EC_PUBLIC_KEY_LEN`` or ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN``."]
    pub fn wally_ec_public_key_verify(
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a public key from a private key."]
    #[doc = ""]
    #[doc = " :param priv_key: The private key to create a public key from."]
    #[doc = " :param priv_key_len: The length of ``priv_key`` in bytes. Must be ``EC_PRIVATE_KEY_LEN``."]
    #[doc = " :param bytes_out: Destination for the resulting public key."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``EC_PUBLIC_KEY_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn wally_ec_public_key_from_private_key(
        priv_key: *const ::std::os::raw::c_uchar,
        priv_key_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create an uncompressed public key from a compressed public key."]
    #[doc = ""]
    #[doc = " :param pub_key: The public key to decompress."]
    #[doc = " :param pub_key_len: The length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param bytes_out: Destination for the resulting public key."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN``."]
    pub fn wally_ec_public_key_decompress(
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Negates a public key."]
    #[doc = ""]
    #[doc = " :param pub_key: The public key to negate."]
    #[doc = " :param pub_key_len: The length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param bytes_out: Destination for the resulting public key."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``EC_PUBLIC_KEY_LEN``."]
    pub fn wally_ec_public_key_negate(
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign a message hash with a private key, producing a compact signature."]
    #[doc = ""]
    #[doc = " :param priv_key: The private key to sign with."]
    #[doc = " :param priv_key_len: The length of ``priv_key`` in bytes. Must be ``EC_PRIVATE_KEY_LEN``."]
    #[doc = " :param bytes: The message hash to sign."]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes. Must be ``EC_MESSAGE_HASH_LEN``."]
    #[doc = " :param flags: EC_FLAG_ flag values indicating desired behavior."]
    #[doc = " :param bytes_out: Destination for the resulting compact signature."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be"]
    #[doc = "|    ``EC_SIGNATURE_LEN`` if EC_FLAG_RECOVERABLE is not set, otherwise must"]
    #[doc = "|    be ``EC_SIGNATURE_RECOVERABLE_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn wally_ec_sig_from_bytes(
        priv_key: *const ::std::os::raw::c_uchar,
        priv_key_len: size_t,
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a signature to low-s form."]
    #[doc = ""]
    #[doc = " :param sig: The compact signature to convert."]
    #[doc = " :param sig_len: The length of ``sig`` in bytes. Must be ``EC_SIGNATURE_LEN``."]
    #[doc = " :param bytes_out: Destination for the resulting low-s signature."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``EC_SIGNATURE_LEN``."]
    pub fn wally_ec_sig_normalize(
        sig: *const ::std::os::raw::c_uchar,
        sig_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a compact signature to DER encoding."]
    #[doc = ""]
    #[doc = " :param sig: The compact signature to convert."]
    #[doc = " :param sig_len: The length of ``sig`` in bytes. Must be ``EC_SIGNATURE_LEN``."]
    #[doc = " :param bytes_out: Destination for the resulting DER encoded signature."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``EC_SIGNATURE_DER_MAX_LEN``."]
    #[doc = " :param written: Destination for the number of bytes written to ``bytes_out``."]
    pub fn wally_ec_sig_to_der(
        sig: *const ::std::os::raw::c_uchar,
        sig_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a DER encoded signature to a compact signature."]
    #[doc = ""]
    #[doc = " :param bytes: The DER encoded signature to convert."]
    #[doc = " :param bytes_len: The length of ``sig`` in bytes."]
    #[doc = " :param bytes_out: Destination for the resulting compact signature."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``EC_SIGNATURE_LEN``."]
    pub fn wally_ec_sig_from_der(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Verify a signed message hash."]
    #[doc = ""]
    #[doc = " :param pub_key: The public key to verify with."]
    #[doc = " :param pub_key_len: The length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param bytes: The message hash to verify."]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes. Must be ``EC_MESSAGE_HASH_LEN``."]
    #[doc = " :param flags: EC_FLAG_ flag values indicating desired behavior."]
    #[doc = " :param sig: The compact signature of the message in ``bytes``."]
    #[doc = " :param sig_len: The length of ``sig`` in bytes. Must be ``EC_SIGNATURE_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn wally_ec_sig_verify(
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        flags: u32,
        sig: *const ::std::os::raw::c_uchar,
        sig_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Recover compressed public key from a recoverable signature."]
    #[doc = ""]
    #[doc = " :param bytes: The message hash signed."]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes. Must be ``EC_MESSAGE_HASH_LEN``."]
    #[doc = " :param sig: The recoverable compact signature of the message in ``bytes``."]
    #[doc = " :param sig_len: The length of ``sig`` in bytes. Must be ``EC_SIGNATURE_RECOVERABLE_LEN``."]
    #[doc = " :param bytes_out: Destination for recovered public key."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``EC_PUBLIC_KEY_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    #[doc = " .. note:: The successful recovery of the public key guarantees the correctness of the signature."]
    pub fn wally_ec_sig_to_public_key(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        sig: *const ::std::os::raw::c_uchar,
        sig_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Format a message for use as a bitcoin signed message."]
    #[doc = ""]
    #[doc = " :param bytes: The message string to sign."]
    #[doc = " :param bytes_len: The length of ``bytes`` in bytes. Must be less than"]
    #[doc = "|    or equal to BITCOIN_MESSAGE_MAX_LEN."]
    #[doc = " :param flags: BITCOIN_MESSAGE_FLAG_ flags indicating the desired output."]
    #[doc = "|    if BITCOIN_MESSAGE_FLAG_HASH is passed, the double SHA256 hash"]
    #[doc = "|    of the message is placed in ``bytes_out`` instead of the formatted"]
    #[doc = "|    message. In this case ``len`` must be at least ``SHA256_LEN``."]
    #[doc = " :param bytes_out: Destination for the formatted message or message hash."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes."]
    #[doc = " :param written: Destination for the number of bytes written to ``bytes_out``."]
    pub fn wally_format_bitcoin_message(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute an EC Diffie-Hellman secret in constant time"]
    #[doc = ""]
    #[doc = " :param pub_key: The public key."]
    #[doc = " :param pub_key_len: The length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param priv_key: The private key."]
    #[doc = " :param priv_key_len: The length of ``priv_key`` in bytes. Must be ``EC_PRIVATE_KEY_LEN``."]
    #[doc = " :param bytes_out: Destination for the shared secret."]
    #[doc = " :param len: The length of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn wally_ecdh(
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        priv_key: *const ::std::os::raw::c_uchar,
        priv_key_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " A transaction witness item"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_tx_witness_item {
    pub witness: *mut ::std::os::raw::c_uchar,
    pub witness_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_tx_witness_item() {
    assert_eq!(
        ::std::mem::size_of::<wally_tx_witness_item>(),
        16usize,
        concat!("Size of: ", stringify!(wally_tx_witness_item))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_tx_witness_item>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_tx_witness_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_witness_item>())).witness as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_witness_item),
            "::",
            stringify!(witness)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_witness_item>())).witness_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_witness_item),
            "::",
            stringify!(witness_len)
        )
    );
}
#[doc = " A transaction witness stack"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_tx_witness_stack {
    pub items: *mut wally_tx_witness_item,
    pub num_items: size_t,
    pub items_allocation_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_tx_witness_stack() {
    assert_eq!(
        ::std::mem::size_of::<wally_tx_witness_stack>(),
        24usize,
        concat!("Size of: ", stringify!(wally_tx_witness_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_tx_witness_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_tx_witness_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_witness_stack>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_witness_stack),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_witness_stack>())).num_items as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_witness_stack),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_witness_stack>())).items_allocation_len as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_witness_stack),
            "::",
            stringify!(items_allocation_len)
        )
    );
}
#[doc = " A transaction input"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_tx_input {
    pub txhash: [::std::os::raw::c_uchar; 32usize],
    pub index: u32,
    pub sequence: u32,
    pub script: *mut ::std::os::raw::c_uchar,
    pub script_len: size_t,
    pub witness: *mut wally_tx_witness_stack,
    pub features: u8,
    pub blinding_nonce: [::std::os::raw::c_uchar; 32usize],
    pub entropy: [::std::os::raw::c_uchar; 32usize],
    pub issuance_amount: *mut ::std::os::raw::c_uchar,
    pub issuance_amount_len: size_t,
    pub inflation_keys: *mut ::std::os::raw::c_uchar,
    pub inflation_keys_len: size_t,
    pub issuance_amount_rangeproof: *mut ::std::os::raw::c_uchar,
    pub issuance_amount_rangeproof_len: size_t,
    pub inflation_keys_rangeproof: *mut ::std::os::raw::c_uchar,
    pub inflation_keys_rangeproof_len: size_t,
    pub pegin_witness: *mut wally_tx_witness_stack,
}
#[test]
fn bindgen_test_layout_wally_tx_input() {
    assert_eq!(
        ::std::mem::size_of::<wally_tx_input>(),
        208usize,
        concat!("Size of: ", stringify!(wally_tx_input))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_tx_input>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_tx_input))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).txhash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(txhash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).index as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).sequence as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).script as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).script_len as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(script_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).witness as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(witness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).features as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).blinding_nonce as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(blinding_nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).entropy as *const _ as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(entropy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).issuance_amount as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(issuance_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_input>())).issuance_amount_len as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(issuance_amount_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).inflation_keys as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(inflation_keys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_input>())).inflation_keys_len as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(inflation_keys_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_input>())).issuance_amount_rangeproof as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(issuance_amount_rangeproof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_input>())).issuance_amount_rangeproof_len as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(issuance_amount_rangeproof_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_input>())).inflation_keys_rangeproof as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(inflation_keys_rangeproof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_input>())).inflation_keys_rangeproof_len as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(inflation_keys_rangeproof_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_input>())).pegin_witness as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_input),
            "::",
            stringify!(pegin_witness)
        )
    );
}
#[doc = " A transaction output"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_tx_output {
    pub satoshi: u64,
    pub script: *mut ::std::os::raw::c_uchar,
    pub script_len: size_t,
    pub features: u8,
    pub asset: *mut ::std::os::raw::c_uchar,
    pub asset_len: size_t,
    pub value: *mut ::std::os::raw::c_uchar,
    pub value_len: size_t,
    pub nonce: *mut ::std::os::raw::c_uchar,
    pub nonce_len: size_t,
    pub surjectionproof: *mut ::std::os::raw::c_uchar,
    pub surjectionproof_len: size_t,
    pub rangeproof: *mut ::std::os::raw::c_uchar,
    pub rangeproof_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_tx_output() {
    assert_eq!(
        ::std::mem::size_of::<wally_tx_output>(),
        112usize,
        concat!("Size of: ", stringify!(wally_tx_output))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_tx_output>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_tx_output))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).satoshi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(satoshi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).script as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).script_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(script_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).features as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).asset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(asset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).asset_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(asset_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).value_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(value_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).nonce as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).nonce_len as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(nonce_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).surjectionproof as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(surjectionproof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_tx_output>())).surjectionproof_len as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(surjectionproof_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).rangeproof as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(rangeproof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx_output>())).rangeproof_len as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx_output),
            "::",
            stringify!(rangeproof_len)
        )
    );
}
#[doc = " A parsed bitcoin transaction"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_tx {
    pub version: u32,
    pub locktime: u32,
    pub inputs: *mut wally_tx_input,
    pub num_inputs: size_t,
    pub inputs_allocation_len: size_t,
    pub outputs: *mut wally_tx_output,
    pub num_outputs: size_t,
    pub outputs_allocation_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_tx() {
    assert_eq!(
        ::std::mem::size_of::<wally_tx>(),
        56usize,
        concat!("Size of: ", stringify!(wally_tx))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_tx>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_tx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).locktime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(locktime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).inputs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).num_inputs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(num_inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).inputs_allocation_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(inputs_allocation_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).outputs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).num_outputs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(num_outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_tx>())).outputs_allocation_len as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_tx),
            "::",
            stringify!(outputs_allocation_len)
        )
    );
}
extern "C" {
    #[doc = " Allocate and initialize a new witness stack."]
    #[doc = ""]
    #[doc = " :param allocation_len: The number of items to pre-allocate space for."]
    #[doc = " :param output: Destination for the resulting witness stack."]
    pub fn wally_tx_witness_stack_init_alloc(
        allocation_len: size_t,
        output: *mut *mut wally_tx_witness_stack,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a copy of a witness stack."]
    #[doc = ""]
    #[doc = " :param stack: The witness stack to copy."]
    #[doc = " :param output: Destination for the resulting copy."]
    pub fn wally_tx_witness_stack_clone_alloc(
        stack: *const wally_tx_witness_stack,
        output: *mut *mut wally_tx_witness_stack,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a witness to a witness stack."]
    #[doc = ""]
    #[doc = " :param stack: The witness stack to add to."]
    #[doc = " :param witness: The witness data to add to the stack."]
    #[doc = " :param witness_len: Length of ``witness`` in bytes."]
    pub fn wally_tx_witness_stack_add(
        stack: *mut wally_tx_witness_stack,
        witness: *const ::std::os::raw::c_uchar,
        witness_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a dummy witness item to a witness stack."]
    #[doc = ""]
    #[doc = " :param stack: The witness stack to add to."]
    #[doc = " :param flags: ``WALLY_TX_DUMMY_`` Flags indicating the type of dummy to add."]
    pub fn wally_tx_witness_stack_add_dummy(
        stack: *mut wally_tx_witness_stack,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a witness item to a witness stack."]
    #[doc = ""]
    #[doc = " :param stack: The witness stack to add to."]
    #[doc = " :param index: Index of the item to set. The stack will grow if needed to this many items."]
    #[doc = " :param witness: The witness data to add to the stack."]
    #[doc = " :param witness_len: Length of ``witness`` in bytes."]
    pub fn wally_tx_witness_stack_set(
        stack: *mut wally_tx_witness_stack,
        index: size_t,
        witness: *const ::std::os::raw::c_uchar,
        witness_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a dummy witness item to a witness stack."]
    #[doc = ""]
    #[doc = " :param stack: The witness stack to add to."]
    #[doc = " :param index: Index of the item to set. The stack will grow if needed to this many items."]
    #[doc = " :param flags: ``WALLY_TX_DUMMY_`` Flags indicating the type of dummy to set."]
    pub fn wally_tx_witness_stack_set_dummy(
        stack: *mut wally_tx_witness_stack,
        index: size_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a transaction witness stack allocated by `wally_tx_witness_stack_init_alloc`."]
    #[doc = ""]
    #[doc = " :param stack: The transaction witness stack to free."]
    pub fn wally_tx_witness_stack_free(stack: *mut wally_tx_witness_stack)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate and initialize a new transaction input."]
    #[doc = ""]
    #[doc = " :param txhash: The transaction hash of the transaction this input comes from."]
    #[doc = " :param txhash_len: Size of ``txhash`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = " :param utxo_index: The zero-based index of the transaction output in ``txhash`` that"]
    #[doc = "|     this input comes from."]
    #[doc = " :param sequence: The sequence number for the input."]
    #[doc = " :param script: The scriptSig for the input."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param witness: The witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param output: Destination for the resulting transaction input."]
    pub fn wally_tx_input_init_alloc(
        txhash: *const ::std::os::raw::c_uchar,
        txhash_len: size_t,
        utxo_index: u32,
        sequence: u32,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        witness: *const wally_tx_witness_stack,
        output: *mut *mut wally_tx_input,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a transaction input allocated by `wally_tx_input_init_alloc`."]
    #[doc = ""]
    #[doc = " :param input: The transaction input to free."]
    pub fn wally_tx_input_free(input: *mut wally_tx_input) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Initialize a new transaction output."]
    #[doc = ""]
    #[doc = " :param satoshi The amount of the output in satoshi."]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param output: Transaction output to initialize."]
    pub fn wally_tx_output_init(
        satoshi: u64,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        output: *mut wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate and initialize a new transaction output."]
    #[doc = ""]
    #[doc = " :param satoshi The amount of the output in satoshi."]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param output: Destination for the resulting transaction output."]
    pub fn wally_tx_output_init_alloc(
        satoshi: u64,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        output: *mut *mut wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new copy of a transaction output."]
    #[doc = ""]
    #[doc = " :param tx_output_in: The transaction output to clone."]
    #[doc = " :param output: Destination for the resulting transaction output copy."]
    pub fn wally_tx_output_clone_alloc(
        tx_output_in: *const wally_tx_output,
        output: *mut *mut wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new copy of a transaction output in place."]
    #[doc = ""]
    #[doc = " :param tx_output_in: The transaction output to clone."]
    #[doc = " :param output: Destination for the resulting transaction output copy."]
    #[doc = ""]
    #[doc = " .. note:: ``output`` is overwritten in place, and not cleared first."]
    pub fn wally_tx_output_clone(
        tx_output_in: *const wally_tx_output,
        output: *mut wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a transaction output allocated by `wally_tx_output_init_alloc`."]
    #[doc = ""]
    #[doc = " :param output: The transaction output to free."]
    pub fn wally_tx_output_free(output: *mut wally_tx_output) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate and initialize a new transaction."]
    #[doc = ""]
    #[doc = " :param version: The version of the transaction."]
    #[doc = " :param locktime: The locktime of the transaction."]
    #[doc = " :param inputs_allocation_len: The number of inputs to pre-allocate space for."]
    #[doc = " :param outputs_allocation_len: The number of outputs to pre-allocate space for."]
    #[doc = " :param output: Destination for the resulting transaction output."]
    pub fn wally_tx_init_alloc(
        version: u32,
        locktime: u32,
        inputs_allocation_len: size_t,
        outputs_allocation_len: size_t,
        output: *mut *mut wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new copy of a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to clone."]
    #[doc = " :param flags: Flags controlling transaction creation. Must be 0."]
    #[doc = " :param output: Destination for the resulting transaction copy."]
    pub fn wally_tx_clone_alloc(
        tx: *const wally_tx,
        flags: u32,
        output: *mut *mut wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction input to a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the input to."]
    #[doc = " :param input: The transaction input to add to ``tx``."]
    pub fn wally_tx_add_input(
        tx: *mut wally_tx,
        input: *const wally_tx_input,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction input to a transaction at a given position."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the input to."]
    #[doc = " :param index: The zero-based index of the position to add the input at."]
    #[doc = " :param input: The transaction input to add to ``tx``."]
    pub fn wally_tx_add_input_at(
        tx: *mut wally_tx,
        index: u32,
        input: *const wally_tx_input,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction input to a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the input to."]
    #[doc = " :param txhash: The transaction hash of the transaction this input comes from."]
    #[doc = " :param txhash_len: Size of ``txhash`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = " :param utxo_index: The zero-based index of the transaction output in ``txhash`` that"]
    #[doc = "|     this input comes from."]
    #[doc = " :param sequence: The sequence number for the input."]
    #[doc = " :param script: The scriptSig for the input."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param witness: The witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param flags: Flags controlling input creation. Must be 0."]
    pub fn wally_tx_add_raw_input(
        tx: *mut wally_tx,
        txhash: *const ::std::os::raw::c_uchar,
        txhash_len: size_t,
        utxo_index: u32,
        sequence: u32,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        witness: *const wally_tx_witness_stack,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction input to a transaction in a goven position."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the input to."]
    #[doc = " :param index: The zero-based index of the position to add the input at."]
    #[doc = " :param txhash: The transaction hash of the transaction this input comes from."]
    #[doc = " :param txhash_len: Size of ``txhash`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = " :param utxo_index: The zero-based index of the transaction output in ``txhash`` that"]
    #[doc = "|     this input comes from."]
    #[doc = " :param sequence: The sequence number for the input."]
    #[doc = " :param script: The scriptSig for the input."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param witness: The witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param flags: Flags controlling input creation. Must be 0."]
    pub fn wally_tx_add_raw_input_at(
        tx: *mut wally_tx,
        index: u32,
        txhash: *const ::std::os::raw::c_uchar,
        txhash_len: size_t,
        utxo_index: u32,
        sequence: u32,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        witness: *const wally_tx_witness_stack,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Remove a transaction input from a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to remove the input from."]
    #[doc = " :param index: The zero-based index of the input to remove."]
    pub fn wally_tx_remove_input(tx: *mut wally_tx, index: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the scriptsig for an input in a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to operate on."]
    #[doc = " :param index: The zero-based index of the input to set the script on."]
    #[doc = " :param script: The scriptSig for the input."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    pub fn wally_tx_set_input_script(
        tx: *const wally_tx,
        index: size_t,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the witness stack for an input in a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to operate on."]
    #[doc = " :param index: The zero-based index of the input to set the witness stack on."]
    #[doc = " :param stack: The transaction witness stack to set."]
    pub fn wally_tx_set_input_witness(
        tx: *const wally_tx,
        index: size_t,
        stack: *const wally_tx_witness_stack,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction output to a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the output to."]
    #[doc = " :param output: The transaction output to add to ``tx``."]
    pub fn wally_tx_add_output(
        tx: *mut wally_tx,
        output: *const wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction output to a transaction at a given position."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the output to."]
    #[doc = " :param index: The zero-based index of the position to add the output at."]
    #[doc = " :param output: The transaction output to add to ``tx``."]
    pub fn wally_tx_add_output_at(
        tx: *mut wally_tx,
        index: u32,
        output: *const wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction output to a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the output to."]
    #[doc = " :param satoshi: The amount of the output in satoshi."]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param flags: Flags controlling output creation. Must be 0."]
    pub fn wally_tx_add_raw_output(
        tx: *mut wally_tx,
        satoshi: u64,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction output to a transaction at a given position."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the output to."]
    #[doc = " :param index: The zero-based index of the position to add the output at."]
    #[doc = " :param satoshi: The amount of the output in satoshi."]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param flags: Flags controlling output creation. Must be 0."]
    pub fn wally_tx_add_raw_output_at(
        tx: *mut wally_tx,
        index: u32,
        satoshi: u64,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Remove a transaction output from a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to remove the output from."]
    #[doc = " :param index: The zero-based index of the output to remove."]
    pub fn wally_tx_remove_output(tx: *mut wally_tx, index: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the number of inputs in a transaction that have witness data."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to get the witnesses count from."]
    #[doc = " :param written: Destination for the number of witness-containing inputs."]
    pub fn wally_tx_get_witness_count(
        tx: *const wally_tx,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a transaction allocated by `wally_tx_init_alloc`."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to free."]
    pub fn wally_tx_free(tx: *mut wally_tx) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return the txid of a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to compute the txid of."]
    #[doc = " :param bytes_out: Destination for the txid."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: The txid is expensive to compute."]
    pub fn wally_tx_get_txid(
        tx: *const wally_tx,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return the length of transaction once serialized into bytes."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to find the serialized length of."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_`` Flags controlling serialization options."]
    #[doc = " :param written: Destination for the length of the serialized bytes."]
    pub fn wally_tx_get_length(
        tx: *const wally_tx,
        flags: u32,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a transaction from its serialized bytes."]
    #[doc = ""]
    #[doc = " :param bytes: Bytes to create the transaction from."]
    #[doc = " :param bytes_len: Length of ``bytes`` in bytes."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_`` Flags controlling serialization options."]
    #[doc = " :param output: Destination for the resulting transaction."]
    pub fn wally_tx_from_bytes(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        flags: u32,
        output: *mut *mut wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a transaction from its serialized bytes in hexadecimal."]
    #[doc = ""]
    #[doc = " :param hex: Hexadecimal string containing the transaction."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_`` Flags controlling serialization options."]
    #[doc = " :param output: Destination for the resulting transaction."]
    pub fn wally_tx_from_hex(
        hex: *const ::std::os::raw::c_char,
        flags: u32,
        output: *mut *mut wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize a transaction to bytes."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to serialize."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_`` Flags controlling serialization options."]
    #[doc = " :param bytes_out: Destination for the serialized transaction."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes."]
    #[doc = " :param written: Destination for the length of the serialized transaction."]
    pub fn wally_tx_to_bytes(
        tx: *const wally_tx,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize a transaction to hex."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to serialize."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_`` Flags controlling serialization options."]
    #[doc = " :param output: Destination for the resulting hexadecimal string."]
    #[doc = ""]
    #[doc = " .. note:: The string returned should be freed using `wally_free_string`."]
    pub fn wally_tx_to_hex(
        tx: *const wally_tx,
        flags: u32,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the weight of a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to get the weight of."]
    #[doc = " :param written: Destination for the weight."]
    pub fn wally_tx_get_weight(tx: *const wally_tx, written: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the virtual size of a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to get the virtual size of."]
    #[doc = " :param written: Destination for the virtual size."]
    pub fn wally_tx_get_vsize(tx: *const wally_tx, written: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute transaction vsize from transaction weight."]
    #[doc = ""]
    #[doc = " :param weight: The weight to convert to a virtual size."]
    #[doc = " :param written: Destination for the virtual size."]
    pub fn wally_tx_vsize_from_weight(
        weight: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute the total sum of all outputs in a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to compute the total from."]
    #[doc = " :param value_out: Destination for the output total."]
    pub fn wally_tx_get_total_output_satoshi(
        tx: *const wally_tx,
        value_out: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a BTC transaction for signing and return its hash."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to generate the signature hash from."]
    #[doc = " :param index: The input index of the input being signed for."]
    #[doc = " :param script: The (unprefixed) scriptCode for the input being signed."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param satoshi: The amount spent by the input being signed for. Only used if"]
    #[doc = "|     flags includes ``WALLY_TX_FLAG_USE_WITNESS``, pass 0 otherwise."]
    #[doc = " :param sighash: ``WALLY_SIGHASH_`` flags specifying the type of signature desired."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_USE_WITNESS`` to generate a BIP 143 signature, or 0"]
    #[doc = "|     to generate a pre-segwit Bitcoin signature."]
    #[doc = " :param bytes_out: Destination for the signature hash."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be at least ``SHA256_LEN``."]
    pub fn wally_tx_get_btc_signature_hash(
        tx: *const wally_tx,
        index: size_t,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        satoshi: u64,
        sighash: u32,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a transaction for signing and return its hash."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to generate the signature hash from."]
    #[doc = " :param index: The input index of the input being signed for."]
    #[doc = " :param script: The (unprefixed) scriptCode for the input being signed."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param extra: Extra bytes to include in the transaction preimage."]
    #[doc = " :param extra_len: Size of ``extra`` in bytes."]
    #[doc = " :param extra_offset: Offset with the preimage to store ``extra``. To store"]
    #[doc = "|     it at the end of the preimage, use 0xffffffff."]
    #[doc = " :param satoshi: The amount spent by the input being signed for. Only used if"]
    #[doc = "|     flags includes ``WALLY_TX_FLAG_USE_WITNESS``, pass 0 otherwise."]
    #[doc = " :param sighash: ``WALLY_SIGHASH_`` flags specifying the type of signature desired."]
    #[doc = " :param tx_sighash: The 32bit sighash value to include in the preimage to hash."]
    #[doc = "|     This must be given in host CPU endianess; For normal Bitcoin signing"]
    #[doc = "|     the value of ``sighash`` should be given."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_USE_WITNESS`` to generate a BIP 143 signature, or 0"]
    #[doc = "|     to generate a pre-segwit Bitcoin signature."]
    #[doc = " :param bytes_out: Destination for the signature hash."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be at least ``SHA256_LEN``."]
    pub fn wally_tx_get_signature_hash(
        tx: *const wally_tx,
        index: size_t,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        extra: *const ::std::os::raw::c_uchar,
        extra_len: size_t,
        extra_offset: u32,
        satoshi: u64,
        sighash: u32,
        tx_sighash: u32,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine if a transaction is a coinbase transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to check."]
    #[doc = " :param written: 1 if the transaction is a coinbase transaction, otherwise 0."]
    pub fn wally_tx_is_coinbase(tx: *const wally_tx, written: *mut size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set issuance data on an input."]
    #[doc = ""]
    #[doc = " :param input: The input to add to."]
    #[doc = " :param nonce: Asset issuance or revelation blinding factor."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param entropy: Entropy for the asset tag calculation."]
    #[doc = " :param entropy_len: Size of ``entropy`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param issuance_amount: The (blinded) issuance amount."]
    #[doc = " :param issuance_amount_len: Size of ``issuance_amount`` in bytes."]
    #[doc = " :param inflation_keys: The (blinded) token reissuance amount."]
    #[doc = " :param inflation_keys_len: Size of ``ìnflation_keys`` in bytes."]
    #[doc = " :param issuance_amount_rangeproof: Issuance amount rangeproof."]
    #[doc = " :param issuance_amount_rangeproof_len: Size of ``issuance_amount_rangeproof`` in bytes."]
    #[doc = " :param inflation_keys_rangeproof: Inflation keys rangeproof."]
    #[doc = " :param inflation_keys_rangeproof_len: Size of ``inflation_keys_rangeproof`` in bytes."]
    pub fn wally_tx_elements_input_issuance_set(
        input: *mut wally_tx_input,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        entropy: *const ::std::os::raw::c_uchar,
        entropy_len: size_t,
        issuance_amount: *const ::std::os::raw::c_uchar,
        issuance_amount_len: size_t,
        inflation_keys: *const ::std::os::raw::c_uchar,
        inflation_keys_len: size_t,
        issuance_amount_rangeproof: *const ::std::os::raw::c_uchar,
        issuance_amount_rangeproof_len: size_t,
        inflation_keys_rangeproof: *const ::std::os::raw::c_uchar,
        inflation_keys_rangeproof_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free issuance data on an input."]
    #[doc = ""]
    #[doc = " :param input: The input issuance data to free."]
    pub fn wally_tx_elements_input_issuance_free(
        input: *mut wally_tx_input,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate and initialize a new elements transaction input."]
    #[doc = ""]
    #[doc = " :param txhash: The transaction hash of the transaction this input comes from."]
    #[doc = " :param txhash_len: Size of ``txhash`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = " :param utxo_index: The zero-based index of the transaction output in ``txhash`` that"]
    #[doc = "|     this input comes from."]
    #[doc = " :param sequence: The sequence number for the input."]
    #[doc = " :param script: The scriptSig for the input."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param witness: The witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param nonce: Asset issuance or revelation blinding factor."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param entropy: Entropy for the asset tag calculation."]
    #[doc = " :param entropy_len: Size of ``entropy`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param issuance_amount: The (blinded) issuance amount."]
    #[doc = " :param issuance_amount_len: Size of ``issuance_amount`` in bytes."]
    #[doc = " :param inflation_keys: The (blinded) token reissuance amount."]
    #[doc = " :param inflation_keys_len: Size of ``ìnflation_keys`` in bytes."]
    #[doc = " :param issuance_amount_rangeproof: Issuance amount rangeproof."]
    #[doc = " :param issuance_amount_rangeproof_len: Size of ``issuance_amount_rangeproof`` in bytes."]
    #[doc = " :param inflation_keys_rangeproof: Inflation keys rangeproof."]
    #[doc = " :param inflation_keys_rangeproof_len: Size of ``inflation_keys_rangeproof`` in bytes."]
    #[doc = " :param pegin_witness: The pegin witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param output: Destination for the resulting transaction input."]
    pub fn wally_tx_elements_input_init_alloc(
        txhash: *const ::std::os::raw::c_uchar,
        txhash_len: size_t,
        utxo_index: u32,
        sequence: u32,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        witness: *const wally_tx_witness_stack,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        entropy: *const ::std::os::raw::c_uchar,
        entropy_len: size_t,
        issuance_amount: *const ::std::os::raw::c_uchar,
        issuance_amount_len: size_t,
        inflation_keys: *const ::std::os::raw::c_uchar,
        inflation_keys_len: size_t,
        issuance_amount_rangeproof: *const ::std::os::raw::c_uchar,
        issuance_amount_rangeproof_len: size_t,
        inflation_keys_rangeproof: *const ::std::os::raw::c_uchar,
        inflation_keys_rangeproof_len: size_t,
        pegin_witness: *const wally_tx_witness_stack,
        output: *mut *mut wally_tx_input,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine if an input is a pegin."]
    #[doc = ""]
    #[doc = " :param input: The input to check."]
    #[doc = " :param written: 1 if the input is a pegin, otherwise 0."]
    pub fn wally_tx_elements_input_is_pegin(
        input: *const wally_tx_input,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set commitment data on an output."]
    #[doc = ""]
    #[doc = " :param output: The output to add to."]
    #[doc = " :param asset: The commitment to a possibly blinded asset."]
    #[doc = " :param asset_len: Size of ``asset`` in bytes. Must be ``WALLY_TX_ASSET_CT_ASSET_LEN``."]
    #[doc = " :param value: The commitment to a possibly blinded value."]
    #[doc = " :param value_len: Size of ``value`` in bytes. Must be ``WALLY_TX_ASSET_CT_VALUE_LEN`` or ``WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN``."]
    #[doc = " :param nonce: The commitment used to create the nonce (with the blinding key) for the range proof."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_CT_NONCE_LEN``."]
    #[doc = " :param surjectionproof: surjection proof."]
    #[doc = " :param surjectionproof_len: Size of ``surjectionproof`` in bytes."]
    #[doc = " :param rangeproof: rangeproof."]
    #[doc = " :param rangeproof_len: Size of ``rangeproof`` in bytes."]
    pub fn wally_tx_elements_output_commitment_set(
        output: *mut wally_tx_output,
        asset: *const ::std::os::raw::c_uchar,
        asset_len: size_t,
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        surjectionproof: *const ::std::os::raw::c_uchar,
        surjectionproof_len: size_t,
        rangeproof: *const ::std::os::raw::c_uchar,
        rangeproof_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free commitment data on an output."]
    #[doc = ""]
    #[doc = " :param output: The output with the commitment data to free."]
    pub fn wally_tx_elements_output_commitment_free(
        output: *mut wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Initialize a new elements transaction output in place."]
    #[doc = ""]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param asset: The asset tag of the output."]
    #[doc = " :param asset_len: Size of ``asset`` in bytes. Must be ``WALLY_TX_ASSET_CT_ASSET_LEN``."]
    #[doc = " :param value: The commitment to a possibly blinded value."]
    #[doc = " :param value_len: Size of ``value`` in bytes. Must be ``WALLY_TX_ASSET_CT_VALUE_LEN`` or ``WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN``."]
    #[doc = " :param nonce: The commitment used to create the nonce (with the blinding key) for the range proof."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_CT_NONCE_LEN``."]
    #[doc = " :param surjectionproof: The surjection proof."]
    #[doc = " :param surjectionproof_len: Size of ``surjectionproof`` in bytes."]
    #[doc = " :param rangeproof: The range proof."]
    #[doc = " :param rangeproof_len: Size of ``rangeproof`` in bytes."]
    #[doc = " :param output: Destination for the resulting transaction output copy."]
    #[doc = ""]
    #[doc = " .. note:: ``output`` is overwritten in place, and not cleared first."]
    pub fn wally_tx_elements_output_init(
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        asset: *const ::std::os::raw::c_uchar,
        asset_len: size_t,
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        surjectionproof: *const ::std::os::raw::c_uchar,
        surjectionproof_len: size_t,
        rangeproof: *const ::std::os::raw::c_uchar,
        rangeproof_len: size_t,
        output: *mut wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate and initialize a new elements transaction output."]
    #[doc = ""]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param asset: The asset tag of the output."]
    #[doc = " :param asset_len: Size of ``asset`` in bytes. Must be ``WALLY_TX_ASSET_CT_ASSET_LEN``."]
    #[doc = " :param value: The commitment to a possibly blinded value."]
    #[doc = " :param value_len: Size of ``value`` in bytes. Must be ``WALLY_TX_ASSET_CT_VALUE_LEN`` or ``WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN``."]
    #[doc = " :param nonce: The commitment used to create the nonce (with the blinding key) for the range proof."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_CT_NONCE_LEN``."]
    #[doc = " :param surjectionproof: The surjection proof."]
    #[doc = " :param surjectionproof_len: Size of ``surjectionproof`` in bytes."]
    #[doc = " :param rangeproof: The range proof."]
    #[doc = " :param rangeproof_len: Size of ``rangeproof`` in bytes."]
    #[doc = " :param output: Destination for the resulting transaction output."]
    pub fn wally_tx_elements_output_init_alloc(
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        asset: *const ::std::os::raw::c_uchar,
        asset_len: size_t,
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        surjectionproof: *const ::std::os::raw::c_uchar,
        surjectionproof_len: size_t,
        rangeproof: *const ::std::os::raw::c_uchar,
        rangeproof_len: size_t,
        output: *mut *mut wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an elements transaction input to a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the input to."]
    #[doc = " :param txhash: The transaction hash of the transaction this input comes from."]
    #[doc = " :param txhash_len: Size of ``txhash`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = " :param utxo_index: The zero-based index of the transaction output in ``txhash`` that"]
    #[doc = "|     this input comes from."]
    #[doc = " :param sequence: The sequence number for the input."]
    #[doc = " :param script: The scriptSig for the input."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param witness: The witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param nonce: Asset issuance or revelation blinding factor."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param entropy: Entropy for the asset tag calculation."]
    #[doc = " :param entropy_len: Size of ``entropy`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param issuance_amount: The (blinded) issuance amount."]
    #[doc = " :param issuance_amount_len: Size of ``issuance_amount`` in bytes."]
    #[doc = " :param inflation_keys: The (blinded) token reissuance amount."]
    #[doc = " :param inflation_keys_len: Size of ``ìnflation_keys`` in bytes."]
    #[doc = " :param issuance_amount_rangeproof: Issuance amount rangeproof."]
    #[doc = " :param issuance_amount_rangeproof_len: Size of ``issuance_amount_rangeproof`` in bytes."]
    #[doc = " :param inflation_keys_rangeproof: Inflation keys rangeproof."]
    #[doc = " :param inflation_keys_rangeproof_len: Size of ``inflation_keys_rangeproof`` in bytes."]
    #[doc = " :param pegin_witness: The pegin witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param flags: Flags controlling input creation. Must be 0."]
    pub fn wally_tx_add_elements_raw_input(
        tx: *mut wally_tx,
        txhash: *const ::std::os::raw::c_uchar,
        txhash_len: size_t,
        utxo_index: u32,
        sequence: u32,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        witness: *const wally_tx_witness_stack,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        entropy: *const ::std::os::raw::c_uchar,
        entropy_len: size_t,
        issuance_amount: *const ::std::os::raw::c_uchar,
        issuance_amount_len: size_t,
        inflation_keys: *const ::std::os::raw::c_uchar,
        inflation_keys_len: size_t,
        issuance_amount_rangeproof: *const ::std::os::raw::c_uchar,
        issuance_amount_rangeproof_len: size_t,
        inflation_keys_rangeproof: *const ::std::os::raw::c_uchar,
        inflation_keys_rangeproof_len: size_t,
        pegin_witness: *const wally_tx_witness_stack,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an elements transaction input to a transaction at a given position."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the input to."]
    #[doc = " :param index: The zero-based index of the position to add the input at."]
    #[doc = " :param txhash: The transaction hash of the transaction this input comes from."]
    #[doc = " :param txhash_len: Size of ``txhash`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = " :param utxo_index: The zero-based index of the transaction output in ``txhash`` that"]
    #[doc = "|     this input comes from."]
    #[doc = " :param sequence: The sequence number for the input."]
    #[doc = " :param script: The scriptSig for the input."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param witness: The witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param nonce: Asset issuance or revelation blinding factor."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param entropy: Entropy for the asset tag calculation."]
    #[doc = " :param entropy_len: Size of ``entropy`` in bytes. Must be ``WALLY_TX_ASSET_TAG_LEN``."]
    #[doc = " :param issuance_amount: The (blinded) issuance amount."]
    #[doc = " :param issuance_amount_len: Size of ``issuance_amount`` in bytes."]
    #[doc = " :param inflation_keys: The (blinded) token reissuance amount."]
    #[doc = " :param inflation_keys_len: Size of ``ìnflation_keys`` in bytes."]
    #[doc = " :param issuance_amount_rangeproof: Issuance amount rangeproof."]
    #[doc = " :param issuance_amount_rangeproof_len: Size of ``issuance_amount_rangeproof`` in bytes."]
    #[doc = " :param inflation_keys_rangeproof: Inflation keys rangeproof."]
    #[doc = " :param inflation_keys_rangeproof_len: Size of ``inflation_keys_rangeproof`` in bytes."]
    #[doc = " :param pegin_witness: The pegin witness stack for the input, or NULL if no witness is present."]
    #[doc = " :param flags: Flags controlling input creation. Must be 0."]
    pub fn wally_tx_add_elements_raw_input_at(
        tx: *mut wally_tx,
        index: u32,
        txhash: *const ::std::os::raw::c_uchar,
        txhash_len: size_t,
        utxo_index: u32,
        sequence: u32,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        witness: *const wally_tx_witness_stack,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        entropy: *const ::std::os::raw::c_uchar,
        entropy_len: size_t,
        issuance_amount: *const ::std::os::raw::c_uchar,
        issuance_amount_len: size_t,
        inflation_keys: *const ::std::os::raw::c_uchar,
        inflation_keys_len: size_t,
        issuance_amount_rangeproof: *const ::std::os::raw::c_uchar,
        issuance_amount_rangeproof_len: size_t,
        inflation_keys_rangeproof: *const ::std::os::raw::c_uchar,
        inflation_keys_rangeproof_len: size_t,
        pegin_witness: *const wally_tx_witness_stack,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a elements transaction output to a transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the output to."]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param asset: The asset tag of the output."]
    #[doc = " :param asset_len: Size of ``asset`` in bytes. Must be ``WALLY_TX_ASSET_CT_ASSET_LEN``."]
    #[doc = " :param value: The commitment to a possibly blinded value."]
    #[doc = " :param value_len: Size of ``value`` in bytes. Must be ``WALLY_TX_ASSET_CT_VALUE_LEN`` or ``WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN``."]
    #[doc = " :param nonce: The commitment used to create the nonce (with the blinding key) for the range proof."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_CT_NONCE_LEN``."]
    #[doc = " :param surjectionproof: The surjection proof."]
    #[doc = " :param surjectionproof_len: Size of ``surjectionproof`` in bytes."]
    #[doc = " :param rangeproof: The range proof."]
    #[doc = " :param rangeproof_len: Size of ``rangeproof`` in bytes."]
    #[doc = " :param flags: Flags controlling output creation. Must be 0."]
    pub fn wally_tx_add_elements_raw_output(
        tx: *mut wally_tx,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        asset: *const ::std::os::raw::c_uchar,
        asset_len: size_t,
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        surjectionproof: *const ::std::os::raw::c_uchar,
        surjectionproof_len: size_t,
        rangeproof: *const ::std::os::raw::c_uchar,
        rangeproof_len: size_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a elements transaction output to a transaction at a given position."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to add the output to."]
    #[doc = " :param index: The zero-based index of the position to add the output at."]
    #[doc = " :param script: The scriptPubkey for the output."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param asset: The asset tag of the output."]
    #[doc = " :param asset_len: Size of ``asset`` in bytes. Must be ``WALLY_TX_ASSET_CT_ASSET_LEN``."]
    #[doc = " :param value: The commitment to a possibly blinded value."]
    #[doc = " :param value_len: Size of ``value`` in bytes. Must be ``WALLY_TX_ASSET_CT_VALUE_LEN`` or ``WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN``."]
    #[doc = " :param nonce: The commitment used to create the nonce (with the blinding key) for the range proof."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_CT_NONCE_LEN``."]
    #[doc = " :param surjectionproof: The surjection proof."]
    #[doc = " :param surjectionproof_len: Size of ``surjectionproof`` in bytes."]
    #[doc = " :param rangeproof: The range proof."]
    #[doc = " :param rangeproof_len: Size of ``rangeproof`` in bytes."]
    #[doc = " :param flags: Flags controlling output creation. Must be 0."]
    pub fn wally_tx_add_elements_raw_output_at(
        tx: *mut wally_tx,
        index: u32,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        asset: *const ::std::os::raw::c_uchar,
        asset_len: size_t,
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
        surjectionproof: *const ::std::os::raw::c_uchar,
        surjectionproof_len: size_t,
        rangeproof: *const ::std::os::raw::c_uchar,
        rangeproof_len: size_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine if a transaction is an elements transaction."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to check."]
    #[doc = " :param written: 1 if the transaction is an elements transaction, otherwise 0."]
    pub fn wally_tx_is_elements(tx: *const wally_tx, written: *mut size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert satoshi to an explicit confidential value representation."]
    #[doc = ""]
    #[doc = " :param satoshi: The value in satoshi to convert."]
    #[doc = " :param bytes_out: Destination for the confidential value bytes."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN``."]
    pub fn wally_tx_confidential_value_from_satoshi(
        satoshi: u64,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert an explicit confidential value representation to satoshi."]
    #[doc = ""]
    #[doc = " :param value: The confidential value bytes."]
    #[doc = " :param value_len: Size of ``value`` in bytes. Must be ``WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN``."]
    #[doc = " :param value_out: The converted value in satoshi."]
    pub fn wally_tx_confidential_value_to_satoshi(
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
        value_out: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a Elements transaction for signing and return its hash."]
    #[doc = ""]
    #[doc = " :param tx: The transaction to generate the signature hash from."]
    #[doc = " :param index: The input index of the input being signed for."]
    #[doc = " :param script: The (unprefixed) scriptCode for the input being signed."]
    #[doc = " :param script_len: Size of ``script`` in bytes."]
    #[doc = " :param value: The (confidential) value spent by the input being signed for. Only used if"]
    #[doc = "|     flags includes ``WALLY_TX_FLAG_USE_WITNESS``, pass NULL otherwise."]
    #[doc = " :param value_len: Size of ``value`` in bytes."]
    #[doc = " :param sighash: ``WALLY_SIGHASH_`` flags specifying the type of signature desired."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_USE_WITNESS`` to generate a BIP 143 signature, or 0"]
    #[doc = "|     to generate a pre-segwit Bitcoin signature."]
    #[doc = " :param bytes_out: Destination for the signature hash."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_tx_get_elements_signature_hash(
        tx: *const wally_tx,
        index: size_t,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
        sighash: u32,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Calculate the asset entropy from a prevout and the Ricardian contract hash."]
    #[doc = ""]
    #[doc = " :param txhash: The prevout transaction hash."]
    #[doc = " :param txhash_len: Size of ``txhash`` in bytes. Must be ``WALLY_TXHASH_LEN``."]
    #[doc = " :param utxo_index: The zero-based index of the transaction output"]
    #[doc = "|     in ``txhash`` to use."]
    #[doc = " :param contract_hash: The issuer specified Ricardian contract hash."]
    #[doc = " :param contract_hash_len: Size of ``contract hash`` in bytes. Must be ``SHA256_LEN``."]
    #[doc = " :param bytes_out: Destination for the asset entropy."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_tx_elements_issuance_generate_entropy(
        txhash: *const ::std::os::raw::c_uchar,
        txhash_len: size_t,
        index: u32,
        contract_hash: *const ::std::os::raw::c_uchar,
        contract_hash_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Calculate the asset from the entropy."]
    #[doc = ""]
    #[doc = " :param entropy: The asset entropy."]
    #[doc = " :param entropy_len: Size of ``entropy`` in bytes. Must be ``SHA256_LEN``."]
    #[doc = " :param bytes_out: Destination for the asset tag."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_tx_elements_issuance_calculate_asset(
        entropy: *const ::std::os::raw::c_uchar,
        entropy_len: size_t,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Calculate a re-issuance token from an asset's entropy."]
    #[doc = ""]
    #[doc = " :param entropy: The asset entropy."]
    #[doc = " :param entropy_len: Size of ``entropy`` in bytes. Must be ``SHA256_LEN``."]
    #[doc = " :param flags: ``WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE`` if initial issuance was blinded,"]
    #[doc = "|     pass 0 otherwise."]
    #[doc = " :param bytes_out: Destination for the re-issuance token."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_tx_elements_issuance_calculate_reissuance_token(
        entropy: *const ::std::os::raw::c_uchar,
        entropy_len: size_t,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " An extended key"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ext_key {
    #[doc = " The chain code for this key"]
    pub chain_code: [::std::os::raw::c_uchar; 32usize],
    #[doc = " The Hash160 of this keys parent"]
    pub parent160: [::std::os::raw::c_uchar; 20usize],
    #[doc = " The depth of this key"]
    pub depth: u8,
    pub pad1: [::std::os::raw::c_uchar; 10usize],
    #[doc = " The private key with prefix byte 0"]
    pub priv_key: [::std::os::raw::c_uchar; 33usize],
    #[doc = " The child number of the parent key that this key represents"]
    pub child_num: u32,
    #[doc = " The Hash160 of this key"]
    pub hash160: [::std::os::raw::c_uchar; 20usize],
    #[doc = " The version code for this key indicating main/testnet and private/public"]
    pub version: u32,
    pub pad2: [::std::os::raw::c_uchar; 3usize],
    #[doc = " The public key with prefix byte 0x2 or 0x3"]
    pub pub_key: [::std::os::raw::c_uchar; 33usize],
    pub pub_key_tweak_sum: [::std::os::raw::c_uchar; 32usize],
}
#[test]
fn bindgen_test_layout_ext_key() {
    assert_eq!(
        ::std::mem::size_of::<ext_key>(),
        192usize,
        concat!("Size of: ", stringify!(ext_key))
    );
    assert_eq!(
        ::std::mem::align_of::<ext_key>(),
        4usize,
        concat!("Alignment of ", stringify!(ext_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).chain_code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(chain_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).parent160 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(parent160)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).depth as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).pad1 as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).priv_key as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(priv_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).child_num as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(child_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).hash160 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(hash160)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).version as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).pad2 as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).pub_key as *const _ as usize },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(pub_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ext_key>())).pub_key_tweak_sum as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ext_key),
            "::",
            stringify!(pub_key_tweak_sum)
        )
    );
}
extern "C" {
    #[doc = " Free a key allocated by `bip32_key_from_seed_alloc`"]
    #[doc = " or `bip32_key_unserialize_alloc`."]
    #[doc = ""]
    #[doc = " :param hdkey: Key to free."]
    pub fn bip32_key_free(hdkey: *const ext_key) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn bip32_key_init(
        version: u32,
        depth: u32,
        child_num: u32,
        chain_code: *const ::std::os::raw::c_uchar,
        chain_code_len: size_t,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        priv_key: *const ::std::os::raw::c_uchar,
        priv_key_len: size_t,
        hash160: *const ::std::os::raw::c_uchar,
        hash160_len: size_t,
        parent160: *const ::std::os::raw::c_uchar,
        parent160_len: size_t,
        output: *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn bip32_key_init_alloc(
        version: u32,
        depth: u32,
        child_num: u32,
        chain_code: *const ::std::os::raw::c_uchar,
        chain_code_len: size_t,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        priv_key: *const ::std::os::raw::c_uchar,
        priv_key_len: size_t,
        hash160: *const ::std::os::raw::c_uchar,
        hash160_len: size_t,
        parent160: *const ::std::os::raw::c_uchar,
        parent160_len: size_t,
        output: *mut *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new master extended key from entropy."]
    #[doc = ""]
    #[doc = " This creates a new master key, i.e. the root of a new HD tree."]
    #[doc = " The entropy passed in may produce an invalid key. If this happens,"]
    #[doc = " WALLY_ERROR will be returned and the caller should retry with"]
    #[doc = " new entropy."]
    #[doc = ""]
    #[doc = " :param bytes: Entropy to use."]
    #[doc = " :param bytes_len: Size of ``bytes`` in bytes. Must be one of ``BIP32_ENTROPY_LEN_128``,"]
    #[doc = "|     ``BIP32_ENTROPY_LEN_256`` or ``BIP32_ENTROPY_LEN_512``."]
    #[doc = " :param version: Either ``BIP32_VER_MAIN_PRIVATE`` or ``BIP32_VER_TEST_PRIVATE``,"]
    #[doc = "|     indicating mainnet or testnet/regtest respectively."]
    #[doc = " :param flags: Either ``BIP32_FLAG_SKIP_HASH`` to skip hash160 calculation, or 0."]
    #[doc = " :param output: Destination for the resulting master extended key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn bip32_key_from_seed(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        version: u32,
        flags: u32,
        output: *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " As per `bip32_key_from_seed`, but allocates the key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    #[doc = " .. note:: The returned key should be freed with `bip32_key_free`."]
    pub fn bip32_key_from_seed_alloc(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        version: u32,
        flags: u32,
        output: *mut *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize an extended key to memory using BIP32 format."]
    #[doc = ""]
    #[doc = " :param hdkey: The extended key to serialize."]
    #[doc = " :param flags: ``BIP32_FLAG_KEY_`` Flags indicating which key to serialize. You can not"]
    #[doc = "|        serialize a private extended key from a public extended key."]
    #[doc = " :param bytes_out: Destination for the serialized key."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``BIP32_SERIALIZED_LEN``."]
    pub fn bip32_key_serialize(
        hdkey: *const ext_key,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Un-serialize an extended key from memory."]
    #[doc = ""]
    #[doc = " :param bytes: Storage holding the serialized key."]
    #[doc = " :param bytes_len: Size of ``bytes`` in bytes. Must be ``BIP32_SERIALIZED_LEN``."]
    #[doc = " :param output: Destination for the resulting extended key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn bip32_key_unserialize(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        output: *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " As per `bip32_key_unserialize`, but allocates the key."]
    #[doc = ""]
    #[doc = " .. note:: The returned key should be freed with `bip32_key_free`."]
    pub fn bip32_key_unserialize_alloc(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        output: *mut *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new child extended key from a parent extended key."]
    #[doc = ""]
    #[doc = " :param hdkey: The parent extended key."]
    #[doc = " :param child_num: The child number to create. Numbers greater"]
    #[doc = "|           than or equal to ``BIP32_INITIAL_HARDENED_CHILD`` represent"]
    #[doc = "|           hardened keys that cannot be created from public parent"]
    #[doc = "|           extended keys."]
    #[doc = " :param flags: ``BIP32_FLAG_KEY_`` Flags indicating the type of derivation wanted."]
    #[doc = "|       You can not derive a private child extended key from a public"]
    #[doc = "|       parent extended key."]
    #[doc = " :param output: Destination for the resulting child extended key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn bip32_key_from_parent(
        hdkey: *const ext_key,
        child_num: u32,
        flags: u32,
        output: *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " As per `bip32_key_from_parent`, but allocates the key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    #[doc = " .. note:: The returned key should be freed with `bip32_key_free`."]
    pub fn bip32_key_from_parent_alloc(
        hdkey: *const ext_key,
        child_num: u32,
        flags: u32,
        output: *mut *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new child extended key from a parent extended key and a path."]
    #[doc = ""]
    #[doc = " :param hdkey: The parent extended key."]
    #[doc = " :param child_path: The path of child numbers to create."]
    #[doc = " :param child_path_len: The number of child numbers in ``child_path``."]
    #[doc = " :param flags: ``BIP32_FLAG_KEY_`` Flags indicating the type of derivation wanted."]
    #[doc = " :param output: Destination for the resulting child extended key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn bip32_key_from_parent_path(
        hdkey: *const ext_key,
        child_path: *const u32,
        child_path_len: size_t,
        flags: u32,
        output: *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " As per `bip32_key_from_parent_path`, but allocates the key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    #[doc = " .. note:: The returned key should be freed with `bip32_key_free`."]
    pub fn bip32_key_from_parent_path_alloc(
        hdkey: *const ext_key,
        child_path: *const u32,
        child_path_len: size_t,
        flags: u32,
        output: *mut *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Derive the pub tweak from a parent extended key and a path."]
    #[doc = ""]
    #[doc = " :param hdkey: The parent extended key."]
    #[doc = " :param child_path: The path of child numbers to create."]
    #[doc = " :param child_path_len: The number of child numbers in ``child_path``."]
    #[doc = " :param bytes_out: Destination for the resulting pub tweak."]
    #[doc = " :param len: Length of ``bytes_out`` in bytes. Must be ``EC_PRIVATE_KEY_LEN``."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    pub fn bip32_key_with_tweak_from_parent_path(
        hdkey: *const ext_key,
        child_path: *const u32,
        child_path_len: size_t,
        flags: u32,
        output: *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " As per `bip32_key_with_tweak_from_parent_path`, but allocates the key."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    #[doc = " .. note:: The returned key should be freed with `bip32_key_free`."]
    pub fn bip32_key_with_tweak_from_parent_path_alloc(
        hdkey: *const ext_key,
        child_path: *const u32,
        child_path_len: size_t,
        flags: u32,
        output: *mut *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert an extended key to base58."]
    #[doc = ""]
    #[doc = " :param hdkey: The extended key."]
    #[doc = " :param flags: ``BIP32_FLAG_KEY_`` Flags indicating which key to serialize. You can not"]
    #[doc = "|        serialize a private extended key from a public extended key."]
    #[doc = " :param output: Destination for the resulting key in base58."]
    #[doc = "|    The string returned should be freed using `wally_free_string`."]
    pub fn bip32_key_to_base58(
        hdkey: *const ext_key,
        flags: u32,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a base58 encoded extended key to an extended key."]
    #[doc = ""]
    #[doc = " :param base58: The extended key in base58."]
    #[doc = " :param output: Destination for the resulting extended key."]
    pub fn bip32_key_from_base58(
        base58: *const ::std::os::raw::c_char,
        output: *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " As per `bip32_key_from_base58`, but allocates the key."]
    #[doc = ""]
    #[doc = " .. note:: The returned key should be freed with `bip32_key_free`."]
    pub fn bip32_key_from_base58_alloc(
        base58: *const ::std::os::raw::c_char,
        output: *mut *mut ext_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Converts a private extended key to a public extended key. Afterwards, only public child extended"]
    #[doc = " keys can be derived, and only the public serialization can be created."]
    #[doc = " If the provided key is already public, nothing will be done."]
    #[doc = ""]
    #[doc = " :param hdkey: The extended key to covert."]
    pub fn bip32_key_strip_private_key(hdkey: *mut ext_key) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the BIP32 fingerprint for an extended key. Performs hash160 calculation"]
    #[doc = " if previously skipped with ``BIP32_FLAG_SKIP_HASH``."]
    #[doc = ""]
    #[doc = " :param hdkey: The extended key."]
    #[doc = " :param bytes_out: Destination for the fingerprint."]
    #[doc = " :param len: Size of ``bytes_out`` in bytes. Must be ``BIP32_KEY_FINGERPRINT_LEN``."]
    pub fn bip32_key_get_fingerprint(
        hdkey: *mut ext_key,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " A map item"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_map_item {
    pub key: *mut ::std::os::raw::c_uchar,
    pub key_len: size_t,
    pub value: *mut ::std::os::raw::c_uchar,
    pub value_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_map_item() {
    assert_eq!(
        ::std::mem::size_of::<wally_map_item>(),
        32usize,
        concat!("Size of: ", stringify!(wally_map_item))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_map_item>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_map_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_map_item>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_map_item),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_map_item>())).key_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_map_item),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_map_item>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_map_item),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_map_item>())).value_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_map_item),
            "::",
            stringify!(value_len)
        )
    );
}
#[doc = " A map of key,value pairs"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_map {
    pub items: *mut wally_map_item,
    pub num_items: size_t,
    pub items_allocation_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_map() {
    assert_eq!(
        ::std::mem::size_of::<wally_map>(),
        24usize,
        concat!("Size of: ", stringify!(wally_map))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_map>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_map>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_map),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_map>())).num_items as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_map),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_map>())).items_allocation_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_map),
            "::",
            stringify!(items_allocation_len)
        )
    );
}
#[doc = " A PSBT input"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_psbt_input {
    pub utxo: *mut wally_tx,
    pub witness_utxo: *mut wally_tx_output,
    pub redeem_script: *mut ::std::os::raw::c_uchar,
    pub redeem_script_len: size_t,
    pub witness_script: *mut ::std::os::raw::c_uchar,
    pub witness_script_len: size_t,
    pub final_scriptsig: *mut ::std::os::raw::c_uchar,
    pub final_scriptsig_len: size_t,
    pub final_witness: *mut wally_tx_witness_stack,
    pub keypaths: wally_map,
    pub signatures: wally_map,
    pub unknowns: wally_map,
    pub sighash: u32,
    pub value: u64,
    pub has_value: u32,
    pub vbf: *mut ::std::os::raw::c_uchar,
    pub vbf_len: size_t,
    pub asset: *mut ::std::os::raw::c_uchar,
    pub asset_len: size_t,
    pub abf: *mut ::std::os::raw::c_uchar,
    pub abf_len: size_t,
    pub pegin_tx: *mut wally_tx,
    pub txoutproof: *mut ::std::os::raw::c_uchar,
    pub txoutproof_len: size_t,
    pub genesis_blockhash: *mut ::std::os::raw::c_uchar,
    pub genesis_blockhash_len: size_t,
    pub claim_script: *mut ::std::os::raw::c_uchar,
    pub claim_script_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_psbt_input() {
    assert_eq!(
        ::std::mem::size_of::<wally_psbt_input>(),
        272usize,
        concat!("Size of: ", stringify!(wally_psbt_input))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_psbt_input>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_psbt_input))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).utxo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(utxo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).witness_utxo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(witness_utxo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).redeem_script as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(redeem_script)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_input>())).redeem_script_len as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(redeem_script_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).witness_script as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(witness_script)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_input>())).witness_script_len as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(witness_script_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_input>())).final_scriptsig as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(final_scriptsig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_input>())).final_scriptsig_len as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(final_scriptsig_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).final_witness as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(final_witness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).keypaths as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(keypaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).signatures as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(signatures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).unknowns as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(unknowns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).sighash as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(sighash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).value as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).has_value as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(has_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).vbf as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(vbf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).vbf_len as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(vbf_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).asset as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(asset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).asset_len as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(asset_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).abf as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(abf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).abf_len as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(abf_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).pegin_tx as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(pegin_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).txoutproof as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(txoutproof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).txoutproof_len as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(txoutproof_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_input>())).genesis_blockhash as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(genesis_blockhash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_input>())).genesis_blockhash_len as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(genesis_blockhash_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_input>())).claim_script as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(claim_script)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_input>())).claim_script_len as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_input),
            "::",
            stringify!(claim_script_len)
        )
    );
}
#[doc = " A PSBT output"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_psbt_output {
    pub redeem_script: *mut ::std::os::raw::c_uchar,
    pub redeem_script_len: size_t,
    pub witness_script: *mut ::std::os::raw::c_uchar,
    pub witness_script_len: size_t,
    pub keypaths: wally_map,
    pub unknowns: wally_map,
    pub blinding_pubkey: *mut ::std::os::raw::c_uchar,
    pub blinding_pubkey_len: size_t,
    pub value_commitment: *mut ::std::os::raw::c_uchar,
    pub value_commitment_len: size_t,
    pub vbf: *mut ::std::os::raw::c_uchar,
    pub vbf_len: size_t,
    pub asset_commitment: *mut ::std::os::raw::c_uchar,
    pub asset_commitment_len: size_t,
    pub abf: *mut ::std::os::raw::c_uchar,
    pub abf_len: size_t,
    pub nonce: *mut ::std::os::raw::c_uchar,
    pub nonce_len: size_t,
    pub rangeproof: *mut ::std::os::raw::c_uchar,
    pub rangeproof_len: size_t,
    pub surjectionproof: *mut ::std::os::raw::c_uchar,
    pub surjectionproof_len: size_t,
}
#[test]
fn bindgen_test_layout_wally_psbt_output() {
    assert_eq!(
        ::std::mem::size_of::<wally_psbt_output>(),
        208usize,
        concat!("Size of: ", stringify!(wally_psbt_output))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_psbt_output>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_psbt_output))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).redeem_script as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(redeem_script)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).redeem_script_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(redeem_script_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).witness_script as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(witness_script)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).witness_script_len as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(witness_script_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).keypaths as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(keypaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).unknowns as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(unknowns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).blinding_pubkey as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(blinding_pubkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).blinding_pubkey_len as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(blinding_pubkey_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).value_commitment as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(value_commitment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).value_commitment_len as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(value_commitment_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).vbf as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(vbf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).vbf_len as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(vbf_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).asset_commitment as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(asset_commitment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).asset_commitment_len as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(asset_commitment_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).abf as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(abf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).abf_len as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(abf_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).nonce as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).nonce_len as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(nonce_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt_output>())).rangeproof as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(rangeproof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).rangeproof_len as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(rangeproof_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).surjectionproof as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(surjectionproof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt_output>())).surjectionproof_len as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt_output),
            "::",
            stringify!(surjectionproof_len)
        )
    );
}
#[doc = " A partially signed bitcoin transaction"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wally_psbt {
    pub magic: [::std::os::raw::c_uchar; 5usize],
    pub tx: *mut wally_tx,
    pub inputs: *mut wally_psbt_input,
    pub num_inputs: size_t,
    pub inputs_allocation_len: size_t,
    pub outputs: *mut wally_psbt_output,
    pub num_outputs: size_t,
    pub outputs_allocation_len: size_t,
    pub unknowns: wally_map,
    pub version: u32,
}
#[test]
fn bindgen_test_layout_wally_psbt() {
    assert_eq!(
        ::std::mem::size_of::<wally_psbt>(),
        96usize,
        concat!("Size of: ", stringify!(wally_psbt))
    );
    assert_eq!(
        ::std::mem::align_of::<wally_psbt>(),
        8usize,
        concat!("Alignment of ", stringify!(wally_psbt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).inputs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).num_inputs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(num_inputs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt>())).inputs_allocation_len as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(inputs_allocation_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).outputs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).num_outputs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(num_outputs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wally_psbt>())).outputs_allocation_len as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(outputs_allocation_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).unknowns as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(unknowns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wally_psbt>())).version as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(wally_psbt),
            "::",
            stringify!(version)
        )
    );
}
extern "C" {
    #[doc = " Allocate and initialize a new map."]
    #[doc = ""]
    #[doc = " :param allocation_len: The number of items to allocate."]
    #[doc = " :param output: Destination for the new map."]
    pub fn wally_map_init_alloc(
        allocation_len: size_t,
        output: *mut *mut wally_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a map allocated by `wally_map_init_alloc`."]
    #[doc = ""]
    #[doc = " :param map_in: The map to free."]
    pub fn wally_map_free(map_in: *mut wally_map) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Find an item in a map."]
    #[doc = ""]
    #[doc = " :param map_in: The map to find ``key`` in."]
    #[doc = " :param key: The key to find."]
    #[doc = " :param key_len: Length of ``key`` in bytes."]
    #[doc = " :param written: On success, set to zero if the item is not found, otherwise"]
    #[doc = "|    the index of the item plus one."]
    pub fn wally_map_find(
        map_in: *const wally_map,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an item to a map."]
    #[doc = ""]
    #[doc = " :param map_in: The map to add to."]
    #[doc = " :param key: The key to add."]
    #[doc = " :param key_len: Length of ``key`` in bytes."]
    #[doc = " :param value: The value to add."]
    #[doc = " :param value_len: Length of ``value`` in bytes."]
    pub fn wally_map_add(
        map_in: *mut wally_map,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        value: *const ::std::os::raw::c_uchar,
        value_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert and add a pubkey/keypath to a map."]
    #[doc = ""]
    #[doc = " :param map_in: The map to add to."]
    #[doc = " :param pub_key: The pubkey to add."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN`` or ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param fingerprint: The master key fingerprint for the pubkey."]
    #[doc = " :param fingerprint_len: Length of ``fingerprint`` in bytes. Must be ``BIP32_KEY_FINGERPRINT_LEN``."]
    #[doc = " :param child_path: The BIP32 derivation path for the pubkey."]
    #[doc = " :param child_path_len: The number of items in ``child_path``."]
    pub fn wally_map_add_keypath_item(
        map_in: *mut wally_map,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        fingerprint: *const ::std::os::raw::c_uchar,
        fingerprint_len: size_t,
        child_path: *const u32,
        child_path_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sort the items in a map."]
    #[doc = ""]
    #[doc = " :param map_in: The map to sort."]
    #[doc = " :param flags: Flags controlling sorting. Must be 0."]
    pub fn wally_map_sort(map_in: *mut wally_map, flags: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine if a PSBT input is finalized."]
    #[doc = ""]
    #[doc = " :param input: The input to check."]
    #[doc = " :param written: On success, set to one if the input is finalized, otherwise zero."]
    pub fn wally_psbt_input_is_finalized(
        input: *const wally_psbt_input,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the utxo in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param utxo: The (non witness) utxo for this input if it exists."]
    pub fn wally_psbt_input_set_utxo(
        input: *mut wally_psbt_input,
        utxo: *const wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the witness_utxo in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param witness_utxo: The witness utxo for this input if it exists."]
    pub fn wally_psbt_input_set_witness_utxo(
        input: *mut wally_psbt_input,
        witness_utxo: *const wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the redeem_script in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param script: The redeem script for this input."]
    #[doc = " :param script_len: Length of ``script`` in bytes."]
    pub fn wally_psbt_input_set_redeem_script(
        input: *mut wally_psbt_input,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the witness_script in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param script: The witness script for this input."]
    #[doc = " :param script_len: Length of ``script`` in bytes."]
    pub fn wally_psbt_input_set_witness_script(
        input: *mut wally_psbt_input,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the final_scriptsig in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param final_scriptsig: The scriptSig for this input."]
    #[doc = " :param final_scriptsig_len: Length of ``final_scriptsig`` in bytes."]
    pub fn wally_psbt_input_set_final_scriptsig(
        input: *mut wally_psbt_input,
        final_scriptsig: *const ::std::os::raw::c_uchar,
        final_scriptsig_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the final_witness in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param final_witness: The witness stack for the input, or NULL if no witness is present."]
    pub fn wally_psbt_input_set_final_witness(
        input: *mut wally_psbt_input,
        final_witness: *const wally_tx_witness_stack,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the keypaths in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param map_in: The HD keypaths for this input."]
    pub fn wally_psbt_input_set_keypaths(
        input: *mut wally_psbt_input,
        map_in: *const wally_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Find a keypath matching a pubkey in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to search in."]
    #[doc = " :param pub_key: The pubkey to find."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN`` or ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param written: On success, set to zero if the item is not found, otherwise"]
    #[doc = "|    the index of the item plus one."]
    pub fn wally_psbt_input_find_keypath(
        input: *mut wally_psbt_input,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert and add a pubkey/keypath to an input."]
    #[doc = ""]
    #[doc = " :param input: The input to add to."]
    #[doc = " :param pub_key: The pubkey to add."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN`` or ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param fingerprint: The master key fingerprint for the pubkey."]
    #[doc = " :param fingerprint_len: Length of ``fingerprint`` in bytes. Must be ``BIP32_KEY_FINGERPRINT_LEN``."]
    #[doc = " :param child_path: The BIP32 derivation path for the pubkey."]
    #[doc = " :param child_path_len: The number of items in ``child_path``."]
    pub fn wally_psbt_input_add_keypath_item(
        input: *mut wally_psbt_input,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        fingerprint: *const ::std::os::raw::c_uchar,
        fingerprint_len: size_t,
        child_path: *const u32,
        child_path_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the partial signatures in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param map_in: The partial signatures for this input."]
    pub fn wally_psbt_input_set_signatures(
        input: *mut wally_psbt_input,
        map_in: *const wally_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Find a partial signature matching a pubkey in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to search in."]
    #[doc = " :param pub_key: The pubkey to find."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN`` or ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param written: On success, set to zero if the item is not found, otherwise"]
    #[doc = "|    the index of the item plus one."]
    pub fn wally_psbt_input_find_signature(
        input: *mut wally_psbt_input,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a pubkey/partial signature item to an input."]
    #[doc = ""]
    #[doc = " :param input: The input to add the partial signature to."]
    #[doc = " :param pub_key: The pubkey to find."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN`` or ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param sig: The DER-encoded signature plus sighash byte to add."]
    #[doc = " :param sig_len: The length of ``sig`` in bytes."]
    pub fn wally_psbt_input_add_signature(
        input: *mut wally_psbt_input,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        sig: *const ::std::os::raw::c_uchar,
        sig_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the unknown values in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param map_in: The unknown key value pairs for this input."]
    pub fn wally_psbt_input_set_unknowns(
        input: *mut wally_psbt_input,
        map_in: *const wally_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Find an unknown item matching a key in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to search in."]
    #[doc = " :param key: The key to find."]
    #[doc = " :param key_len: Length of ``key`` in bytes."]
    #[doc = " :param written: On success, set to zero if the item is not found, otherwise"]
    #[doc = "|    the index of the item plus one."]
    pub fn wally_psbt_input_find_unknown(
        input: *mut wally_psbt_input,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the sighash type in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param sighash: The sighash type for this input."]
    pub fn wally_psbt_input_set_sighash(
        input: *mut wally_psbt_input,
        sighash: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the redeem_script in an output."]
    #[doc = ""]
    #[doc = " :param output: The input to update."]
    #[doc = " :param script: The redeem script for this output."]
    #[doc = " :param script_len: Length of ``script`` in bytes."]
    pub fn wally_psbt_output_set_redeem_script(
        output: *mut wally_psbt_output,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the witness_script in an output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param script: The witness script for this output."]
    #[doc = " :param script_len: Length of ``script`` in bytes."]
    pub fn wally_psbt_output_set_witness_script(
        output: *mut wally_psbt_output,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the keypaths in an output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param map_in: The HD keypaths for this output."]
    pub fn wally_psbt_output_set_keypaths(
        output: *mut wally_psbt_output,
        map_in: *const wally_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Find a keypath matching a pubkey in an output."]
    #[doc = ""]
    #[doc = " :param output: The output to search in."]
    #[doc = " :param pub_key: The pubkey to find."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN`` or ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param written: On success, set to zero if the item is not found, otherwise"]
    #[doc = "|    the index of the item plus one."]
    pub fn wally_psbt_output_find_keypath(
        output: *mut wally_psbt_output,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert and add a pubkey/keypath to an output."]
    #[doc = ""]
    #[doc = " :param output: The output to add to."]
    #[doc = " :param pub_key: The pubkey to add."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes. Must be ``EC_PUBLIC_KEY_UNCOMPRESSED_LEN`` or ``EC_PUBLIC_KEY_LEN``."]
    #[doc = " :param fingerprint: The master key fingerprint for the pubkey."]
    #[doc = " :param fingerprint_len: Length of ``fingerprint`` in bytes. Must be ``BIP32_KEY_FINGERPRINT_LEN``."]
    #[doc = " :param child_path: The BIP32 derivation path for the pubkey."]
    #[doc = " :param child_path_len: The number of items in ``child_path``."]
    pub fn wally_psbt_output_add_keypath_item(
        output: *mut wally_psbt_output,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
        fingerprint: *const ::std::os::raw::c_uchar,
        fingerprint_len: size_t,
        child_path: *const u32,
        child_path_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the unknown map in an output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param map_in: The unknown key value pairs for this output."]
    pub fn wally_psbt_output_set_unknowns(
        output: *mut wally_psbt_output,
        map_in: *const wally_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Find an unknown item matching a key in an output."]
    #[doc = ""]
    #[doc = " :param output: The output to search in."]
    #[doc = " :param key: The key to find."]
    #[doc = " :param key_len: Length of ``key`` in bytes."]
    #[doc = " :param written: On success, set to zero if the item is not found, otherwise"]
    #[doc = "|    the index of the item plus one."]
    pub fn wally_psbt_output_find_unknown(
        output: *mut wally_psbt_output,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate and initialize a new PSBT."]
    #[doc = ""]
    #[doc = " :param version: The version of the PSBT. Must be 0."]
    #[doc = " :param inputs_allocation_len: The number of inputs to pre-allocate space for."]
    #[doc = " :param outputs_allocation_len: The number of outputs to pre-allocate space for."]
    #[doc = " :param global_unknowns_allocation_len: The number of global unknowns to allocate space for."]
    #[doc = " :param output: Destination for the resulting PSBT output."]
    pub fn wally_psbt_init_alloc(
        version: u32,
        inputs_allocation_len: size_t,
        outputs_allocation_len: size_t,
        global_unknowns_allocation_len: size_t,
        output: *mut *mut wally_psbt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a PSBT allocated by `wally_psbt_init_alloc`."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to free."]
    pub fn wally_psbt_free(psbt: *mut wally_psbt) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine if all PSBT inputs are finalized."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to check."]
    #[doc = " :param written: On success, set to one if the PSBT is finalized, otherwise zero."]
    pub fn wally_psbt_is_finalized(
        psbt: *const wally_psbt,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the global transaction for a PSBT."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to set the transaction for."]
    #[doc = " :param tx: The transaction to set."]
    #[doc = ""]
    #[doc = " The global transaction can only be set on a newly created PSBT. After this"]
    #[doc = " call completes the PSBT will have empty inputs and outputs for each input"]
    #[doc = " and output in the transaction ``tx`` given."]
    pub fn wally_psbt_set_global_tx(
        psbt: *mut wally_psbt,
        tx: *const wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction input to PBST at a given position."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to add the input to."]
    #[doc = " :param index: The zero-based index of the position to add the input at."]
    #[doc = " :param flags: Flags controlling input insertion. Must be 0 or ``WALLY_PSBT_FLAG_NON_FINAL``."]
    #[doc = " :param input: The transaction input to add."]
    pub fn wally_psbt_add_input_at(
        psbt: *mut wally_psbt,
        index: u32,
        flags: u32,
        input: *const wally_tx_input,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Remove a transaction input from a PBST."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to remove the input from."]
    #[doc = " :param index: The zero-based index of the input to remove."]
    pub fn wally_psbt_remove_input(psbt: *mut wally_psbt, index: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction output to PBST at a given position."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to add the output to."]
    #[doc = " :param index: The zero-based index of the position to add the output at."]
    #[doc = " :param flags: Flags controlling output insertion. Must be 0."]
    #[doc = " :param output: The transaction output to add."]
    pub fn wally_psbt_add_output_at(
        psbt: *mut wally_psbt,
        index: u32,
        flags: u32,
        output: *const wally_tx_output,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Remove a transaction output from a PBST."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to remove the output from."]
    #[doc = " :param index: The zero-based index of the output to remove."]
    pub fn wally_psbt_remove_output(psbt: *mut wally_psbt, index: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a PSBT from its serialized bytes."]
    #[doc = ""]
    #[doc = " :param bytes: Bytes to create the PSBT from."]
    #[doc = " :param bytes_len: Length of ``bytes`` in bytes."]
    #[doc = " :param output: Destination for the resulting PSBT."]
    pub fn wally_psbt_from_bytes(
        bytes: *const ::std::os::raw::c_uchar,
        bytes_len: size_t,
        output: *mut *mut wally_psbt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the length of a PSBT when serialized to bytes."]
    #[doc = ""]
    #[doc = " :param psbt: the PSBT."]
    #[doc = " :param flags: Flags controlling length determination. Must be 0."]
    #[doc = " :param written: Destination for the length in bytes when serialized."]
    pub fn wally_psbt_get_length(
        psbt: *const wally_psbt,
        flags: u32,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize a PSBT to bytes."]
    #[doc = ""]
    #[doc = " :param psbt: the PSBT to serialize."]
    #[doc = " :param flags: Flags controlling serialization. Must be 0."]
    #[doc = " :param bytes_out: Bytes to create the transaction from."]
    #[doc = " :param len: Length of ``bytes`` in bytes (use `wally_psbt_get_length`)."]
    #[doc = " :param written: number of bytes written to bytes_out."]
    pub fn wally_psbt_to_bytes(
        psbt: *const wally_psbt,
        flags: u32,
        bytes_out: *mut ::std::os::raw::c_uchar,
        len: size_t,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a PSBT from its serialized base64 string."]
    #[doc = ""]
    #[doc = " :param base64: Base64 string to create the PSBT from."]
    #[doc = " :param output: Destination for the resulting PSBT."]
    pub fn wally_psbt_from_base64(
        base64: *const ::std::os::raw::c_char,
        output: *mut *mut wally_psbt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize a PSBT to a base64 string."]
    #[doc = ""]
    #[doc = " :param psbt: the PSBT to serialize."]
    #[doc = " :param flags: Flags controlling serialization. Must be 0."]
    #[doc = " :param output: Destination for the resulting serialized PSBT."]
    pub fn wally_psbt_to_base64(
        psbt: *const wally_psbt,
        flags: u32,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Combine the metadata from a source PSBT into another PSBT."]
    #[doc = ""]
    #[doc = " :param psbt: the PSBT to combine into."]
    #[doc = " :param source: the PSBT to copy data from."]
    pub fn wally_psbt_combine(
        psbt: *mut wally_psbt,
        src: *const wally_psbt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Clone a PSBT into a newly allocated copy."]
    #[doc = ""]
    #[doc = " :param psbt: the PSBT to clone."]
    #[doc = " :param flags: Flags controlling PSBT creation. Must be 0."]
    #[doc = " :param output: Destination for the resulting cloned PSBT."]
    pub fn wally_psbt_clone_alloc(
        psbt: *const wally_psbt,
        flags: u32,
        output: *mut *mut wally_psbt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign a PSBT using the simple signer algorithm."]
    #[doc = ""]
    #[doc = " :param psbt: PSBT to sign. Directly modifies this PSBT."]
    #[doc = " :param key: Private key to sign PSBT with."]
    #[doc = " :param key_len: Length of key in bytes. Must be ``EC_PRIVATE_KEY_LEN``."]
    #[doc = " :param flags: Flags controlling sigining. Must be 0 or EC_FLAG_GRIND_R."]
    #[doc = ""]
    #[doc = " .. note:: This function requires external locking if called from multiple threads."]
    #[doc = " .. note:: See https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki#simple-signer-algorithm"]
    #[doc = "|    for a description of the simple signer algorithm."]
    pub fn wally_psbt_sign(
        psbt: *mut wally_psbt,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Finalize a PSBT."]
    #[doc = ""]
    #[doc = " :param psbt: PSBT to finalize. Directly modifies this PSBT."]
    pub fn wally_psbt_finalize(psbt: *mut wally_psbt) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Extract a network transaction from a finalized PSBT."]
    #[doc = ""]
    #[doc = " :param psbt: PSBT to extract from."]
    #[doc = " :param output: Destination for the resulting transaction."]
    pub fn wally_psbt_extract(
        psbt: *const wally_psbt,
        output: *mut *mut wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine if a PSBT is an elements PSBT."]
    #[doc = ""]
    #[doc = " :param psbt: The PSBT to check."]
    #[doc = " :param written: 1 if the PSBT is an elements PSBT, otherwise 0."]
    pub fn wally_psbt_is_elements(
        psbt: *const wally_psbt,
        written: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate and initialize a new elements PSBT."]
    #[doc = ""]
    #[doc = " :param version: The version of the PSBT. Must be 0."]
    #[doc = " :param inputs_allocation_len: The number of inputs to pre-allocate space for."]
    #[doc = " :param outputs_allocation_len: The number of outputs to pre-allocate space for."]
    #[doc = " :param global_unknowns_allocation_len: The number of global unknowns to allocate space for."]
    #[doc = " :param output: Destination for the resulting PSBT output."]
    pub fn wally_psbt_elements_init_alloc(
        version: u32,
        inputs_allocation_len: size_t,
        outputs_allocation_len: size_t,
        global_unknowns_allocation_len: size_t,
        output: *mut *mut wally_psbt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the value in an elements input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param value: The value for this input."]
    pub fn wally_psbt_input_set_value(
        input: *mut wally_psbt_input,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Clear the value in an elements input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    pub fn wally_psbt_input_clear_value(input: *mut wally_psbt_input) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the value blinding factor in an elements input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param vbf: The value blinding factor."]
    #[doc = " :param vbf_len: Length of ``vbf``. Must be ``BLINDING_FACTOR_LEN``."]
    pub fn wally_psbt_input_set_vbf(
        input: *mut wally_psbt_input,
        vbf: *const ::std::os::raw::c_uchar,
        vbf_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the asset in an elements input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param asset: The asset for this input."]
    #[doc = " :param asset_len: Length of ``asset`` in bytes."]
    pub fn wally_psbt_input_set_asset(
        input: *mut wally_psbt_input,
        asset: *const ::std::os::raw::c_uchar,
        asset_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the asset blinding factor in an elements input"]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param abf: The asset blinding factor."]
    #[doc = " :param abf_len: Length of ``abf`` in bytes. Must be ``BLINDING_FACTOR_LEN``."]
    pub fn wally_psbt_input_set_abf(
        input: *mut wally_psbt_input,
        abf: *const ::std::os::raw::c_uchar,
        abf_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the peg in tx in an input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param pegin_tx: The peg in tx for this input if it exists."]
    pub fn wally_psbt_input_set_pegin_tx(
        input: *mut wally_psbt_input,
        pegin_tx: *const wally_tx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the txout proof in an elements input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param proof: The txout proof for this input."]
    #[doc = " :param proof_len: Length of ``proof`` in bytes."]
    pub fn wally_psbt_input_set_txoutproof(
        input: *mut wally_psbt_input,
        proof: *const ::std::os::raw::c_uchar,
        proof_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the genesis hash in an elements input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param genesis_blockhash: The genesis hash for this input."]
    #[doc = " :param genesis_blockhash_len: Length of ``genesis_blockhash`` in bytes. Must be ``SHA256_LEN``."]
    pub fn wally_psbt_input_set_genesis_blockhash(
        input: *mut wally_psbt_input,
        genesis_blockhash: *const ::std::os::raw::c_uchar,
        genesis_blockhash_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the claim script in an elements input."]
    #[doc = ""]
    #[doc = " :param input: The input to update."]
    #[doc = " :param script: The claim script for this input."]
    #[doc = " :param script_len: Length of ``script`` in bytes."]
    pub fn wally_psbt_input_set_claim_script(
        input: *mut wally_psbt_input,
        script: *const ::std::os::raw::c_uchar,
        script_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the blinding pubkey in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param pub_key: The blinding pubkey for this output."]
    #[doc = " :param pub_key_len: Length of ``pub_key`` in bytes."]
    pub fn wally_psbt_output_set_blinding_pubkey(
        output: *mut wally_psbt_output,
        pub_key: *const ::std::os::raw::c_uchar,
        pub_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the value commitment in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param commitment: The value commitment for this output."]
    #[doc = " :param commitment_len: Length of ``commitment`` in bytes."]
    pub fn wally_psbt_output_set_value_commitment(
        output: *mut wally_psbt_output,
        commitment: *const ::std::os::raw::c_uchar,
        commitment_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the value blinding factor in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param vbf: The value blinding factor."]
    #[doc = " :param vbf_len: Length of ``vbf``. Must be ``BLINDING_FACTOR_LEN``."]
    pub fn wally_psbt_output_set_vbf(
        output: *mut wally_psbt_output,
        vbf: *const ::std::os::raw::c_uchar,
        vbf_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the asset commitment in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param commitment: The asset commitment for this output."]
    #[doc = " :param commitment_len: Length of ``commitment`` in bytes."]
    pub fn wally_psbt_output_set_asset_commitment(
        output: *mut wally_psbt_output,
        commitment: *const ::std::os::raw::c_uchar,
        commitment_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the asset blinding factor in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param abf: The asset blinding factor."]
    #[doc = " :param abf_len: Length of ``abf`` in bytes. Must be ``BLINDING_FACTOR_LEN``."]
    pub fn wally_psbt_output_set_abf(
        output: *mut wally_psbt_output,
        abf: *const ::std::os::raw::c_uchar,
        abf_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the nonce commitment in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param nonce: The commitment used to create the nonce (with the blinding key) for the range proof."]
    #[doc = " :param nonce_len: Size of ``nonce`` in bytes. Must be ``WALLY_TX_ASSET_CT_NONCE_LEN``."]
    pub fn wally_psbt_output_set_nonce(
        output: *mut wally_psbt_output,
        nonce: *const ::std::os::raw::c_uchar,
        nonce_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the range proof in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param proof: The range proof for this output."]
    #[doc = " :param proof_len: Length of ``proof`` in bytes."]
    pub fn wally_psbt_output_set_rangeproof(
        output: *mut wally_psbt_output,
        proof: *const ::std::os::raw::c_uchar,
        proof_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the surjection proof in an elements output."]
    #[doc = ""]
    #[doc = " :param output: The output to update."]
    #[doc = " :param proof: The surjection proof for this output."]
    #[doc = " :param proof_len: Length of ``proof`` in bytes."]
    pub fn wally_psbt_output_set_surjectionproof(
        output: *mut wally_psbt_output,
        proof: *const ::std::os::raw::c_uchar,
        proof_len: size_t,
    ) -> ::std::os::raw::c_int;
}
